"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[2199],{96080:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(667);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||i;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},41830:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var r=n(54570),a=n(89462),i=(n(667),n(96080)),l=["components"],o={},s=void 0,c={unversionedId:"llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post",id:"llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post",title:"2025-06-27-success-software-2025-list-from-all-link-dump-post",description:"[[TOC]]",source:"@site/docs/llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post.md",sourceDirName:"llm-experiments/2025-06-27",slug:"/llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post",permalink:"/docs/llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/llm-experiments/2025-06-27/2025-06-27-success-software-2025-list-from-all-link-dump-post.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Capitol Hill's mystery soda machine",permalink:"/docs/walking-seatle-places/2023-06-11-Capitol-Hill-s-mystery-soda-machine"},next:{title:"LLM Agent: Software Link Extractor and Cataloger",permalink:"/docs/llm-experiments/2025-06-27/AGENTS"}},d=[{value:"Repository Structure",id:"repository-structure",children:[{value:"Sample from TODO.md",id:"sample-from-todomd",children:[],level:3},{value:"Sample from AGENTS.md",id:"sample-from-agentsmd",children:[],level:3}],level:2},{value:"Technique Description",id:"technique-description",children:[],level:2},{value:"Iteration Process",id:"iteration-process",children:[],level:2},{value:"Example Entry in software2025.md",id:"example-entry-in-software2025md",children:[],level:2},{value:"File Coverage",id:"file-coverage",children:[],level:2},{value:"Benefits of the Technique",id:"benefits-of-the-technique",children:[],level:2},{value:"Conclusion",id:"conclusion",children:[],level:2}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"[","[",(0,i.kt)("em",{parentName:"p"},"TOC"),"]","]"),(0,i.kt)("h1",{id:"2025-06-27-success-software-2025-list-from-all-link-dump-post"},"2025-06-27-success-software-2025-list-from-all-link-dump-post"),(0,i.kt)("p",null,"Disclaimer: This post is LLM-generated, like everything here in AI experiments is AI-generated, and created based on my description and instructions, and after shallow review by a human."),(0,i.kt)("p",null,"This experiment explored how to harness an LLM agent built with OpenAI\u2019s Codecs tool to process a large collection of Markdown files and generate a consolidated software catalog. The core technique was to drive the agent via a simple \u201cto-do\u201d list in ",(0,i.kt)("inlineCode",{parentName:"p"},"TODO.md"),", instruct it through ",(0,i.kt)("inlineCode",{parentName:"p"},"AGENTS.md"),", and capture results in ",(0,i.kt)("inlineCode",{parentName:"p"},"software2025.md"),". Over six iterations, the agent consumed 73 unprocessed files, extracted links, and produced structured entries."),(0,i.kt)("h2",{id:"repository-structure"},"Repository Structure"),(0,i.kt)("p",null,"The key files in this experiment were: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/llm-experiments/2025-06-27/TODO"},"/docs/llm-experiments/2025-06-27/TODO")," : A checklist of files to process "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/llm-experiments/2025-06-27/AGENTS"},"/docs/llm-experiments/2025-06-27/AGENTS")," : The agent\u2019s rules, responsibilities, and workflow "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/llm-experiments/2025-06-27/software"},"/docs/llm-experiments/2025-06-27/software")," : The generated catalog of software entries ")),(0,i.kt)("h3",{id:"sample-from-todomd"},"Sample from TODO.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"## Files to process\n- [x] 2025-05-28-links-from-my-inbox.md\n- [ ] 2025-06-09-links-from-my-inbox.md\n")),(0,i.kt)("p",null,"The unchecked item marked the next file the agent should load and process ."),(0,i.kt)("h3",{id:"sample-from-agentsmd"},"Sample from AGENTS.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"# LLM Agent: Software Link Extractor and Cataloger\n\n## Responsibilities\n- Parse TODO.md for unprocessed items\n- Load each referenced file\n- Extract all URLs\n- Filter URLs by software criteria\n- Query external sources for descriptions\n- Append entries to software.md\n- Mark TODO.md items as processed\n")),(0,i.kt)("p",null,"This clear list of steps told the agent exactly what to do in each batch of ten files ."),(0,i.kt)("h2",{id:"technique-description"},"Technique Description"),(0,i.kt)("p",null,"The main trick was to embed agent instructions in a Markdown file so that the LLM could read its own \u201cto-do\u201d list and follow it. This approach has three parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Task Definition"),"\nA simple checklist in ",(0,i.kt)("inlineCode",{parentName:"li"},"TODO.md")," listed all files. Each unchecked box indicated work to be done."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Agent Instructions"),"\nIn ",(0,i.kt)("inlineCode",{parentName:"li"},"AGENTS.md"),", the agent read the checklist, processed one batch at a time, and knew how to handle each file."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Output Consolidation"),"\nThe agent appended formatted entries into ",(0,i.kt)("inlineCode",{parentName:"li"},"software2025.md")," and updated the checklist.")),(0,i.kt)("p",null,"This method turned a static repository into a dynamic, self-driving workflow where the LLM agent could iterate without manual intervention."),(0,i.kt)("h2",{id:"iteration-process"},"Iteration Process"),(0,i.kt)("p",null,"Over six iterations, the agent processed all 73 files. Each iteration followed these steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Read ",(0,i.kt)("inlineCode",{parentName:"li"},"TODO.md")," and find up to ten unchecked files."),(0,i.kt)("li",{parentName:"ul"},"For each file:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Load its content."),(0,i.kt)("li",{parentName:"ul"},"Extract all ",(0,i.kt)("inlineCode",{parentName:"li"},"http://")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"https://")," links."),(0,i.kt)("li",{parentName:"ul"},"Filter links to include only software projects, tools, or downloads."),(0,i.kt)("li",{parentName:"ul"},"Perform web queries to gather a title, description, and usage example."),(0,i.kt)("li",{parentName:"ul"},"Generate a single Markdown list entry."))),(0,i.kt)("li",{parentName:"ul"},"Append new entries under the correct category in ",(0,i.kt)("inlineCode",{parentName:"li"},"software2025.md"),"."),(0,i.kt)("li",{parentName:"ul"},"Mark each processed file with ",(0,i.kt)("inlineCode",{parentName:"li"},"[x]")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"TODO.md"),".")),(0,i.kt)("p",null,"By batching ten files, the agent maintained focus and quality while ensuring progress was tracked."),(0,i.kt)("h2",{id:"example-entry-in-software2025md"},"Example Entry in software2025.md"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"### \ud83d\udda5\ufe0f\u2699\ufe0f Command-Line Applications\n\n- [tldr pages](https://tldr.sh/) \u2013 Community-maintained cheat-sheets for over 200 Unix commands. Example: `tldr tar` shows common tar options. :contentReference[oaicite:5]{index=5}\n")),(0,i.kt)("p",null,"Each entry included a link, a concise description, and a command-line example. This made the catalog immediately usable."),(0,i.kt)("h2",{id:"file-coverage"},"File Coverage"),(0,i.kt)("p",null,"The 73 files spanned from July 2021 through May 2025. Sample breakdown:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"2021: 12 files"),(0,i.kt)("li",{parentName:"ul"},"2022: 24 files"),(0,i.kt)("li",{parentName:"ul"},"2023: 16 files"),(0,i.kt)("li",{parentName:"ul"},"2024: 12 files"),(0,i.kt)("li",{parentName:"ul"},"2025: 9 files")),(0,i.kt)("p",null,"This wide date range demonstrated the agent\u2019s ability to handle a large and growing archive."),(0,i.kt)("h2",{id:"benefits-of-the-technique"},"Benefits of the Technique"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Scalability"),"\nThe to-do list mechanism scales to hundreds of files by simply updating ",(0,i.kt)("inlineCode",{parentName:"li"},"TODO.md"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Transparency"),"\nAll instructions live in Markdown, making the workflow easy to audit."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reproducibility"),"\nAnyone can clone the repo, run the agent, and get the same results.")),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"By combining a simple Markdown to-do list and an agent description file, this experiment showed how to orchestrate an LLM to perform multi-step workflows over a large codebase. The agent iterated, extracted links, enriched data via web search, and produced a structured catalog in ",(0,i.kt)("inlineCode",{parentName:"p"},"software2025.md"),". This pattern can be extended to other tasks such as documentation generation, data extraction, or content analysis."))}m.isMDXComponent=!0}}]);