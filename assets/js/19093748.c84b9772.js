"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[4040],{96080:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return m}});var r=t(667);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(f,o(o({ref:e},c),{},{components:t})):r.createElement(f,o({ref:e},c))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},59670:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=t(54570),a=t(89462),i=(t(667),t(96080)),o=["components"],l={},s="dev-lua",u={unversionedId:"dev-lua",id:"dev-lua",title:"dev-lua",description:"Date: 2024-11-10",source:"@site/docs/dev-lua.md",sourceDirName:".",slug:"/dev-lua",permalink:"/docs/dev-lua",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev-lua.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dev-linux",permalink:"/docs/dev-linux"},next:{title:"dev-oculus-quest2-inbox",permalink:"/docs/dev-oculus-quest2-inbox"}},c=[{value:"Learn Lua",id:"learn-lua",children:[],level:2}],p={toc:c};function d(n){var e=n.components,l=(0,a.Z)(n,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,l,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dev-lua"},"dev-lua"),(0,i.kt)("p",null,"Date: 2024-11-10"),(0,i.kt)("p",null,"I will think critically and objectively about the problem."),(0,i.kt)("h2",{id:"learn-lua"},"Learn Lua"),(0,i.kt)("p",null,"2024-11-11 ",(0,i.kt)("a",{parentName:"p",href:"https://devhints.io/lua"},"Lua cheatsheet")," { devhints.io }"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("img",{alt:"image-20241110234228949",src:t(46018).Z,width:"1276",height:"805"}))),(0,i.kt)("p",null,"2024-11-11 ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/doches/2219649"},"Lua Cheat Sheet")," { gist.github.com }"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Updated to Lua 5.4 with the GPT assistance. I am not sure if it works")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Lua Cheat Sheet for Programmers, by Al Sweigart http://coffeeghost.net\n-- This cheat sheet is an executable Lua program.\n\n--[[\n  This is a multiline comment\n]]\n\n--[[\n  This is a neat trick. The first -- makes -[[ not a multiline comment.\n]]\nprint("This line executes.")\n--]] The rest of this line is also a comment.\n\nprint("Here is a string" .. \' concatenated with \' .. 2 .. \' other strings.\')\n\n-- Note: All number types are doubles. There are no integers.\nprint(type(42), type(42.0)) -- prints out "number  number"\n\n-- Variables\nvariable_one = 1 + 2 - 3 -- This will equal zero.\nvariable_One = "Variables are case sensitive."\nnegative_twofiftysix = -2^8\n\n-- Multiple assignment and swapping\nlocal a, b = 42, 101\na, b = b, a -- provides a nice value swap trick\nlocal x, y, z = 1, 2, 3, "this value is discarded"\n\n-- nil comparisons\nprint(previously_unused_variable == nil) -- prints true, all vars start as nil\nprint(nil == 0 or nil == "") -- prints false, nil is not the same as false or 0\nprint(\'The # len operator says there are \' .. #\'hello\' .. \' letters in "hello".\')\n\n-- Boolean operations\nsome_bool_variable = true and false or true and not false\n\n-- Tables\nlocal a_table = {[\'spam\'] = "Type something in:", [\'eggs\'] = 10} -- tables are dictionaries/arrays\nprint(a_table[\'spam\'])\n\n-- User input\nlocal what_the_user_typed_in = io.read()\nprint(\'You typed in \' .. what_the_user_typed_in)\n\n-- If statements\nif 10 < 20 then\n    print("apple" == "orange") -- prints false\n    print("apple" ~= "orange") -- true, an apple is not equal to an orange\n    local foo = 42\n    print(foo)\nelif 50 < 100 then\n    -- These clauses can contain no lines of code.\nend\n\n-- Scoping example\nprint(foo) -- prints nil, local foo exists only in that "if" block above\n\n-- While loop\nlocal m = 0\nwhile m < 10 do\n    print("howdy " .. m)\n    m = m + 1 -- there is no m++ or m += 1\n    repeat\n        print("Repeat loops check the condition at end, and stops if it is true.")\n        break -- breaks out of the loop early\n    until m == 9999\nend\n\n-- For loops\nfor i = 1, 10 do\n    for j = 1, 10, 2 do\n        print("for loops add 1 to i and 2 to j each iteration " .. i .. \' \' .. j)\n    end\nend\n\n-- Functions\nlocal function Greet(name)\n    print(\'Hello \' .. name)\n    bar = 100\n    return "returns nil if you don\'t have a return statement."\nend\nGreet(\'Al Sweigart\')\nprint(bar) -- prints 100\n\n--[[\nAdditional Lua Features:\n]]\n\n-- 1. Metatables and Metamethods\nlocal myTable = {1, 2, 3}\nsetmetatable(myTable, {\n    __add = function(table1, table2)\n        local result = {}\n        for i = 1, #table1 do\n            result[i] = table1[i] + table2[i]\n        end\n        return result\n    end\n})\nlocal anotherTable = {4, 5, 6}\nlocal resultTable = myTable + anotherTable\nprint(resultTable[1], resultTable[2], resultTable[3]) -- demonstrates metamethods\n\n-- 2. Coroutines\nlocal function foo()\n    for i = 1, 10 do\n        print("Coroutine iteration: " .. i)\n        coroutine.yield() -- pauses the coroutine\n    end\nend\nlocal co = coroutine.create(foo)\ncoroutine.resume(co) -- runs until yield\ncoroutine.resume(co) -- resumes from yield\n\n-- 3. Modules and Packages\n-- Modules and packages allow us to separate code into reusable parts.\nlocal myModule = require("myModule")\n\n-- 4. Object-Oriented Programming (OOP) with Lua\nlocal Account = {balance = 0}\nfunction Account:new(o, balance)\n    o = o or {}\n    setmetatable(o, self)\n    self.__index = self\n    self.balance = balance or 0\n    return o\nend\nfunction Account:deposit(amount)\n    self.balance = self.balance + amount\nend\nlocal myAccount = Account:new(nil, 100)\nmyAccount:deposit(50)\nprint(myAccount.balance) -- prints 150\n\n-- 5. Error Handling\nlocal status, err = pcall(function() error("An error occurred") end)\nif not status then\n    print("Caught error: " .. err)\nend\n\n-- 6. File Handling and File I/O\nlocal file = io.open("test.txt", "w")\nfile:write("Hello World")\nfile:close()\n\n-- 7. String Manipulation Functions\nprint(string.find("Hello Lua", "Lua")) -- finds "Lua" in string\nprint(string.match("I have 2 apples", "%d")) -- finds digits in string\n\n-- 8. Mathematical Functions\nprint(math.sin(math.pi / 2)) -- prints 1\nprint(math.floor(3.14)) -- prints 3\n\n-- 9. Standard Library Functions\nprint(table.concat({"Hello", "Lua"}, " ")) -- concatenates table values with separator\n\n-- 10. Iterators and the `pairs` / `ipairs` functions\nfor key, value in pairs(a_table) do\n    print(key, value)\nend\n\n-- 11. Garbage Collection\ncollectgarbage() -- performs garbage collection\n\n-- 12. Environment Manipulation\nprint(_G) -- prints global environment table\n\n-- 13. Debug Library\nprint(debug.traceback()) -- prints a traceback\n\n-- 14. Weak Tables\nlocal weakTable = setmetatable({}, {__mode = "v"}) -- weak reference in values\n\n-- 15. Upvalues and Closures\nlocal function outerFunc()\n    local x = 0\n    return function()\n        x = x + 1\n        return x\n    end\nend\nlocal counter = outerFunc()\nprint(counter()) -- prints 1\nprint(counter()) -- prints 2\n\n-- 16. Bitwise Operations\n-- Lua 5.3 introduced bitwise operators like &, |, ~, <<, >>\nlocal bitwise_and = 5 & 3 -- performs bitwise AND, result is 1\nlocal bitwise_or = 5 | 3 -- performs bitwise OR, result is 7\nlocal bitwise_not = ~5 -- performs bitwise NOT, result is -6\nlocal bitwise_shift_left = 5 << 1 -- result is 10\nlocal bitwise_shift_right = 5 >> 1 -- result is 2\nprint(bitwise_and, bitwise_or, bitwise_not, bitwise_shift_left, bitwise_shift_right)\n\n-- 17. Finer Control of Scope (do blocks)\ndo\n    local scoped_var = 42\n    print(scoped_var) -- prints 42\nend\n-- print(scoped_var) -- would cause an error, scoped_var is not defined here\n\n-- 18. Custom Iterators\nfunction custom_iterator(max_count)\n    local count = 0\n    return function()\n        count = count + 1\n        if count <= max_count then\n            return count\n        end\n    end\nend\nfor value in custom_iterator(5) do\n    print(value) -- prints values from 1 to 5\nend\n\n-- 19. Pattern Matching with string.gsub\nlocal str = "I have 2 apples and 3 oranges."\nlocal result_str = string.gsub(str, "%d+", "<number>") -- replaces all digits with \'<number>\'\nprint(result_str) -- prints: I have <number> apples and <number> oranges.\n\n-- 20. Tables as Sets\nlocal setA = {1, 2, 3}\nlocal setB = {3, 4, 5}\nlocal union = {}\nlocal intersection = {}\n\n-- Union operation\nfor _, v in ipairs(setA) do union[v] = true end\nfor _, v in ipairs(setB) do union[v] = true end\nprint("Union:")\nfor k in pairs(union) do print(k) end\n\n-- Intersection operation\nfor _, v in ipairs(setA) do intersection[v] = false end\nfor _, v in ipairs(setB) do\n    if intersection[v] == false then\n        intersection[v] = true\n    end\nend\nprint("Intersection:")\nfor k, v in pairs(intersection) do\n    if v == true then\n        print(k)\n    end\nend\n\n-- 21. Command Line Arguments\n-- The \'arg\' table stores command line arguments passed to the script\nfor i, v in ipairs(arg) do\n    print("Argument " .. i .. ": " .. v)\nend\n\n')),(0,i.kt)("p",null,"2024-11-11 ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/JettIsOnTheNet/b7472ee8b1f5b324c498302b0f61957d"},"Awesome Lua Cheat Sheet \xb7 GitHub")," {gist.github.com}"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("img",{alt:"image-20241111000353791",src:t(61591).Z,width:"979",height:"760"}))),(0,i.kt)("p",null,"2024-11-11 ",(0,i.kt)("a",{parentName:"p",href:"https://www.codecademy.com/learn/learn-lua/modules/learn-lua-introduction/cheatsheet"},"Learn Lua: Introduction to Lua Cheatsheet | Codecademy")," { ",(0,i.kt)("a",{parentName:"p",href:"http://www.codecademy.com"},"www.codecademy.com")," }"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("img",{alt:"image-20241111000550931",src:t(9195).Z,width:"1323",height:"629"}))))}d.isMDXComponent=!0},46018:function(n,e,t){e.Z=t.p+"assets/images/image-20241110234228949-1a724f6733cb0da7e372885076466c27.png"},61591:function(n,e,t){e.Z=t.p+"assets/images/image-20241111000353791-fe4e07cacbb84135106a182a995e08de.png"},9195:function(n,e,t){e.Z=t.p+"assets/images/image-20241111000550931-e72084d8e9ec16b93df3a663fba3701e.png"}}]);