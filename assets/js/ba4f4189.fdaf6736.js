"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[7386],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(r),h=o,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||l;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2641:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var n=r(7462),o=r(3366),l=(r(7294),r(3905)),a=["components"],i={},s="Dev. PowerShell random solutions",u={unversionedId:"dev-powershell/dev-powershell-random-articles",id:"dev-powershell/dev-powershell-random-articles",title:"Dev. PowerShell random solutions",description:'- 2022-02-24 powershell - How to get status of "Invoke-Expression", successful or failed? - Stack Overflow',source:"@site/docs/dev-powershell/dev-powershell-random-articles.md",sourceDirName:"dev-powershell",slug:"/dev-powershell/dev-powershell-random-articles",permalink:"/docs/dev-powershell/dev-powershell-random-articles",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev-powershell/dev-powershell-random-articles.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dev JavaScript and NodeJS",permalink:"/docs/dev-js/dev-js-articles"},next:{title:"Cross platform UI",permalink:"/docs/dev-ui/crossplatform-ui"}},p=[],c={toc:p};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"dev-powershell-random-solutions"},"Dev. PowerShell random solutions"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"2022-02-24 ",(0,l.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/32348794/how-to-get-status-of-invoke-expression-successful-or-failed"},'powershell - How to get status of "Invoke-Expression", successful or failed? - Stack Overflow'),(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"Invoke-Expression will return all the text of the command being invoked.\nBut how can I get the system return value of whether this command has been executed successfully or with a failure? In CMD I could use %errorlevel% to get external command execution state. What about PowerShell?")))),(0,l.kt)("p",null,"Mathias R. Jessen:\nNormally you would use\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"$?"),"\xa0to inspect the status of the last statement executed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"PS C:\\> Write-Output 123 | Out-Null; $?\nTrue\nPS C:\\> Non-ExistingCmdlet 123 | Out-Null; $?\nFalse\n\n")),(0,l.kt)("p",null,"However, this won't work with\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"Invoke-Expression"),", because even though a statement inside the expression passed to\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"Invoke-Expression"),"\xa0may fail, the\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"Invoke-Expression"),"\xa0call it self will have succeeded (ie. the expression, although invalid/non-functional was invoked none the less)"),(0,l.kt)("hr",null),(0,l.kt)("p",null,"With\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"Invoke-Expression"),"\xa0you'll have to use try:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'try {\n    Invoke-Expression "Do-ErrorProneAction -Parameter $argument"\n} catch {\n    # error handling go here, $_ contains the error record\n}\n\n')),(0,l.kt)("p",null,"or a trap:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'trap {\n    # error handling goes here, $_ contains the error record\n}\nInvoke-Expression "More-ErrorProneActions"\n\n')),(0,l.kt)("hr",null),(0,l.kt)("p",null,"The alternative is the append\xa0",(0,l.kt)("inlineCode",{parentName:"p"},'";$?"'),"\xa0to the expression you want to invoke:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$Expr  = \"Write-Host $SomeValue\"\n$Expr += ';$?'\n\n$Success = Invoke-Expression $Expr\nif(-not $Success){\n    # seems to have failed\n}\n\n")),(0,l.kt)("p",null,"but relies on there not being any pipeline output"))}d.isMDXComponent=!0}}]);