"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[6348],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8069:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],l={},c=void 0,s={unversionedId:"dev/dev-csharp",id:"dev/dev-csharp",title:"dev-csharp",description:"Dev C# Articles",source:"@site/docs/dev/dev-csharp.md",sourceDirName:"dev",slug:"/dev/dev-csharp",permalink:"/docs/dev/dev-csharp",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev/dev-csharp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Classics of software development",permalink:"/docs/dev/dev-classics"},next:{title:"dev-design-and-process",permalink:"/docs/dev/dev-design-and-process"}},p=[{value:"Dev C# Articles",id:"dev-c-articles",children:[],level:2},{value:"Garbage Collector",id:"garbage-collector",children:[],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"dev-c-articles"},"Dev C# Articles"),(0,i.kt)("h2",{id:"garbage-collector"},"Garbage Collector"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"2022-03-10 ",(0,i.kt)("a",{parentName:"li",href:"https://michaelscodingspot.com/avoid-gc-pressure/"},"8 Techniques to Avoid GC Pressure and Improve Performance in C# .NET - Michael's Coding Spot"),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},".NET provides a lot of great collections types like ",(0,i.kt)("inlineCode",{parentName:"p"},"List<T>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Dictionary<T>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"HashSet<T>"),". All those collections have dynamic size capacity. That means they automatically expand in size as you add more items."))),(0,i.kt)("li",{parentName:"ul"},"Set initial capacity for dynamic collections"),(0,i.kt)("li",{parentName:"ul"},"Use ArrayPool for short-lived large arrays"),(0,i.kt)("li",{parentName:"ul"},"Use Structs instead of Classes (sometimes)"),(0,i.kt)("li",{parentName:"ul"},"Avoid Finalizers"),(0,i.kt)("li",{parentName:"ul"},"Use StackAlloc for short-lived array allocations"),(0,i.kt)("li",{parentName:"ul"},"Use StringBuilder, but not always"),(0,i.kt)("li",{parentName:"ul"},"Use String Interning in very specific cases"),(0,i.kt)("li",{parentName:"ul"},"Avoid memory leaks"),(0,i.kt)("li",{parentName:"ul"},"Summary:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Allocations should be avoided if possible."),(0,i.kt)("li",{parentName:"ul"},"Reusing memory is better than allocating new memory."),(0,i.kt)("li",{parentName:"ul"},"Allocating on the Stack is faster than allocating on the Heap.")))))}d.isMDXComponent=!0}}]);