"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[4474],{96080:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(667);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},33260:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=a(54570),r=a(89462),i=(a(667),a(96080)),l=["components"],o={},s="dev-c99-recreational-programming",p={unversionedId:"dev-c99-recreational-programming",id:"dev-c99-recreational-programming",title:"dev-c99-recreational-programming",description:"Date: 2025-08-10",source:"@site/docs/dev-c99-recreational-programming.md",sourceDirName:".",slug:"/dev-c99-recreational-programming",permalink:"/docs/dev-c99-recreational-programming",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev-c99-recreational-programming.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dev-c99-libraries",permalink:"/docs/dev-c99-libraries"},next:{title:"dev-c99-video-content-creators",permalink:"/docs/dev-c99-video-content-creators"}},u=[{value:"Tips for Structuring Your Recreational Programming Journey",id:"tips-for-structuring-your-recreational-programming-journey",children:[],level:2},{value:"Compilers",id:"compilers",children:[],level:2},{value:"Programmers!",id:"programmers",children:[{value:"Salvatore \u201cantirez\u201d Sanfilippo \u2014 Blog",id:"salvatore-antirez-sanfilippo--blog",children:[],level:3},{value:"Stephen Brennan \u2014 Blog",id:"stephen-brennan--blog",children:[],level:3},{value:"Connor Stack (cstack) \u2014 Tutorial Series",id:"connor-stack-cstack--tutorial-series",children:[],level:3},{value:"Arjun Sreedharan \u2014 Blog",id:"arjun-sreedharan--blog",children:[],level:3},{value:"Dan Luu \u2014 Articles",id:"dan-luu--articles",children:[],level:3},{value:"Daniel Holden \u2014 Build Your Own Lisp",id:"daniel-holden--build-your-own-lisp",children:[],level:3},{value:"Robert Nystrom \u2014 Crafting Interpreters",id:"robert-nystrom--crafting-interpreters",children:[],level:3},{value:"More to explore",id:"more-to-explore",children:[],level:3}],level:2},{value:"Libraries",id:"libraries",children:[],level:2},{value:"Books",id:"books",children:[],level:2}],c={toc:u};function m(e){var t=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dev-c99-recreational-programming"},"dev-c99-recreational-programming"),(0,i.kt)("p",null,"Date: 2025-08-10"),(0,i.kt)("h2",{id:"tips-for-structuring-your-recreational-programming-journey"},"Tips for Structuring Your Recreational Programming Journey"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Learn, then build"),"\nFollow a tutorial to learn a concept. Then make a small project that uses it. Build a tiny shell from a guide, then add piping on your own. Do a mini database tutorial, then write a simple key value store yourself."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Ship in small steps"),"\nBreak projects into stages. Set clear milestones. For a text editor: open and show a file, edit text, save to disk, then add syntax highlighting. Keep the app runnable after each step to get fast feedback."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Iterate and refactor"),"\nWrite the simple version first. Expect to change it as you learn. Replace rough code with a cleaner design. It is fine to throw code away. You are here to learn, not hit a deadline."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Keep a log"),"\nWrite a short note after each session. What you tried, what broke, how you fixed it. These notes reinforce learning and help future you. They also make easy README or blog posts that can help others."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Mix your project types"),"\nDo not stick to one domain. Try a system tool, then a small graphics demo with SDL or OpenGL, then a network app. A chat server with Berkeley sockets is a good next step. Beej\u2019s Guide can help."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use modern C and tools"),"\nPrefer C99 or C11. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"stdint.h")," types. Avoid unsafe calls like ",(0,i.kt)("inlineCode",{parentName:"p"},"gets()"),". Use ",(0,i.kt)("inlineCode",{parentName:"p"},"gdb")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"lldb"),", and address sanitizers to catch memory bugs early."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Keep perspective"),'\nBig hobby projects can look scary. Everyone starts small. It is okay to repeat classic projects. The point is to learn. As Brian Kernighan said, "the best way to learn a new programming language is to write programs in it." Celebrate small wins and enjoy the process.'),(0,i.kt)("h2",{id:"compilers"},"Compilers"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://bellard.org/tcc/"},(0,i.kt)("strong",{parentName:"a"},"bellard.org/tcc/: Tiny C Compiler (TCC) by Fabrice Bellard"))),(0,i.kt)("p",null,"Tiny C Compiler (TCC) is a compact (~100 KB) standalone C compiler that combines preprocessing, compiling, assembling, and linking in one tool. It supports ANSI C (C89/C90), much of C99, and GNU C extensions including inline assembly, and can operate without external toolchains. TCC compiles, assembles, and links roughly nine times faster than GCC."),(0,i.kt)("p",null,"It includes optional memory and bounds checking that can be mixed seamlessly with regular C code. TCC scripts can be executed directly with ",(0,i.kt)("inlineCode",{parentName:"p"},"tcc -run")," plus a shebang line. It is embeddable through ",(0,i.kt)("inlineCode",{parentName:"p"},"libtcc"),", enabling dynamic code generation and execution."),(0,i.kt)("p",null,"Example usage:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#!/usr/local/bin/tcc -run\n#include <stdio.h>\n\nint main() {\n    printf("Hello, TCC!\\n");\n    return 0;\n}\n')),(0,i.kt)("p",null,"This runs the C code in one step\u2014compile and execute\u2014without manual linking."),(0,i.kt)("h2",{id:"programmers"},"Programmers!"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://www.youtube.com/watch?v=443UNeGrFoM"},"How I program C - YouTube")," { ",(0,i.kt)("a",{parentName:"strong",href:"http://www.youtube.com"},"www.youtube.com")," } - Eskil Steenberg")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Advanced C: control over convenience")),(0,i.kt)("p",null,"A brief, distillation of a video transcript by Eskil Steenberg. The talk is aimed at experienced programmers who have heard that C is hard or dated. The thesis is simple: in the beginning you want results; in the end you want control. C gives you control. Embrace it."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Core ideas")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Embrace complexity you will eventually need. Avoid magic you cannot steer."),(0,i.kt)("li",{parentName:"ul"},"Keep the tech footprint tiny. Target C89 portability. Wrap every dependency."),(0,i.kt)("li",{parentName:"ul"},"Be explicit. Clarity beats cleverness. Prefer readable code and compiler errors over hidden behavior."),(0,i.kt)("li",{parentName:"ul"},"Long, sequential code is fine when it improves state clarity. Fewer indirections, fewer surprises."),(0,i.kt)("li",{parentName:"ul"},"Names should be long and regular: ",(0,i.kt)("inlineCode",{parentName:"li"},"module_object_action"),". Pair opposites: ",(0,i.kt)("inlineCode",{parentName:"li"},"create")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"destroy"),"."),(0,i.kt)("li",{parentName:"ul"},"Crash loud in debug. Silence hides bugs. Tools + assertions are your friends."),(0,i.kt)("li",{parentName:"ul"},"Build tools around a simple language. Own your stack. Build a mountain.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"What C can do: focused examples")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Opaque handles: object-oriented C without the lies")),(0,i.kt)("p",null,"Public header exposes only a handle and functions. Internals stay private and free to change."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/* public.h */\ntypedef void *io_stream;            /* opaque handle */\n\nio_stream io_stream_create_tcp(const char *host, int port);\nvoid      io_stream_send_all(io_stream s);\nvoid      io_stream_destroy(io_stream s);\n\n/* internal.c */\ntypedef struct {\n    int sock;\n    /* buffers, counters, whatever */\n} stream_impl;\n\nio_stream io_stream_create_tcp(const char *host, int port) {\n    stream_impl *s = malloc(sizeof *s);\n    /* connect... */\n    return (io_stream)s;\n}\n\nvoid io_stream_send_all(io_stream h) {\n    stream_impl *s = (stream_impl *)h;\n    /* send pending bytes */\n}\n\nvoid io_stream_destroy(io_stream h) {\n    stream_impl *s = (stream_impl *)h;\n    /* close sock */\n    free(s);\n}\n")),(0,i.kt)("p",null,"Why this matters: encapsulation without runtime overhead, ABI stability, freedom to rewrite internals."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Debug memory like you mean it: wrap allocators with file+line")),(0,i.kt)("p",null,"Crashes are good. Precision is better. Track where bytes came from and where they were freed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/* memdbg.h */\nvoid *dbg_malloc_impl(size_t n, const char *file, int line);\nvoid *dbg_realloc_impl(void *p, size_t n, const char *file, int line);\nvoid  dbg_free_impl(void *p, const char *file, int line);\nvoid  dbg_report_leaks(void);\n\n#define malloc(n)      dbg_malloc_impl((n), __FILE__, __LINE__)\n#define realloc(p,n)   dbg_realloc_impl((p),(n), __FILE__, __LINE__)\n#define free(p)        dbg_free_impl((p), __FILE__, __LINE__)\n")),(0,i.kt)("p",null,"Inside ",(0,i.kt)("inlineCode",{parentName:"p"},"dbg_*")," keep a table of allocations, over-allocate with a guard word, and verify guards to catch overruns. At exit, print where leaks came from with exact file:line."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"sizeof *ptr"),": allocations that cannot go stale")),(0,i.kt)("p",null,"Types change. This does not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"double *a = NULL;\na = malloc(10 * sizeof *a);   /* correct even if a later becomes float* */\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Pointer iteration beats index math")),(0,i.kt)("p",null,"Let the type system stride for you."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"uint8_t *p = buf, *end = buf + n;\nfor (; p != end; ++p) *p = 0;      /* avoids repeated index*stride */\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Layout literacy: padding and order")),(0,i.kt)("p",null,"Order members to minimize padding and keep arrays tight."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/* bad: wastes space on many ABIs */\nstruct Bad { uint8_t a; uint32_t b; uint8_t c; };\n\n/* better: pack smalls together, then bigs */\nstruct Good { uint8_t a, c, pad[2]; uint32_t b; };\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"One allocation for header + data: flexible arrays")),(0,i.kt)("p",null,"Keep related data contiguous for cache wins."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct {\n    size_t len;\n    int    data[];         /* C99 flexible array */\n} int_vec;\n\nint_vec *v = malloc(sizeof *v + count * sizeof v->data[0]);\nv->len = count;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Dynamic arrays where ",(0,i.kt)("inlineCode",{parentName:"strong"},"realloc")," shines")),(0,i.kt)("p",null,"Make ",(0,i.kt)("inlineCode",{parentName:"p"},"realloc")," rare, but do not fear it. Contiguity pays for itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct { size_t len, cap; int *data; } vec;\n\nstatic void vec_push(vec *v, int x) {\n    if (v->len == v->cap) {\n        v->cap = v->cap ? v->cap * 2 : 16;\n        v->data = realloc(v->data, v->cap * sizeof *v->data);\n    }\n    v->data[v->len++] = x;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Stride makes APIs universal")),(0,i.kt)("p",null,"Operate over RGB, RGBA, or structs without copies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"void brighten_u8(uint8_t *rgb, size_t count, size_t stride, uint8_t add) {\n    for (size_t i = 0; i < count; ++i) {\n        rgb[0] = (uint8_t)(rgb[0] + add);\n        rgb[1] = (uint8_t)(rgb[1] + add);\n        rgb[2] = (uint8_t)(rgb[2] + add);\n        rgb += stride;     /* 3 for RGB, 4 for RGBA, sizeof(struct Pix) for AoS */\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Header first: simple inheritance")),(0,i.kt)("p",null,"A shared header lets you pass many concrete types through one API without vtables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'typedef enum { ET_block, ET_collider, ET_character } entity_kind;\n\ntypedef struct {\n    entity_kind kind;\n    float       pos[3];\n    int         id;\n} entity_head;\n\ntypedef struct { entity_head h; int material; } block;\ntypedef struct { entity_head h; float radius; } collider;\n\nvoid entity_move(entity_head *e, float dx, float dy, float dz) {\n    e->pos[0] += dx; e->pos[1] += dy; e->pos[2] += dz;\n}\n\nvoid entity_debug(entity_head *e) {\n    switch (e->kind) {\n    case ET_block:    /* cast safely: header is first */\n        printf("block id=%d\\n", ((block *)e)->h.id);\n        break;\n    case ET_collider:\n        printf("collider r=%f\\n", ((collider *)e)->radius);\n        break;\n    default: break;\n    }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Binary packing that debugs itself")),(0,i.kt)("p",null,"Name your fields in debug builds; scream when order or type is wrong."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/* pack.h */\nvoid pack_u32(void *dst, uint32_t v, const char *name, const char *file, int line);\nvoid unpack_u32(const void *src, uint32_t *v, const char *expect_name, const char *file, int line);\n#define PACK_U32(d,v,name)   pack_u32((d),(v),(name), __FILE__, __LINE__)\n#define UNPACK_U32(s,v,name) unpack_u32((s),(v),(name), __FILE__, __LINE__)\n")),(0,i.kt)("p",null,'On mismatch, print: file:line expected u32 "health", found f32 "alpha". Bugs die fast.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"UI without ceremony: pointer-as-ID")),(0,i.kt)("p",null,"A single function can draw and handle input if you key state by a stable pointer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct { int phase; int mouse_x, mouse_y; int mouse_down; } ui_in;\n\n/* The address of label acts as the unique ID for this button instance. */\nbool ui_button(ui_in *in, const char *label, float x, float y) {\n    void *id = (void *)label;   /* any stable pointer works */\n    /* internally: remember last rect for id; on input phase, hit-test; on draw, render */\n    /* return true if clicked and not occluded by later draws */\n    /* ... */\n    return false;\n}\n")),(0,i.kt)("p",null,"You do not pass handles around. The library uses the pointer to find its own stored state across phases."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Name like you mean it")),(0,i.kt)("p",null,"Prefer width over brevity."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Types: ",(0,i.kt)("inlineCode",{parentName:"li"},"ImageReader"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"HashMap"),"."),(0,i.kt)("li",{parentName:"ul"},"Functions: ",(0,i.kt)("inlineCode",{parentName:"li"},"image_reader_open"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"image_reader_read"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"image_reader_close"),"."),(0,i.kt)("li",{parentName:"ul"},"Pair actions: ",(0,i.kt)("inlineCode",{parentName:"li"},"create")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"destroy"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"load")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"unload"),", never ",(0,i.kt)("inlineCode",{parentName:"li"},"create")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"remove"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Crash early, crash loud")),(0,i.kt)("p",null,"If it is wrong, stop there with context."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define REQUIRE(x) do { if (!(x)) { \\\n    fprintf(stderr, "require failed: %s at %s:%d\\n", #x, __FILE__, __LINE__); \\\n    abort(); } } while (0)\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Performance truths you can use today")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Memory is slow; math is fast. Optimize for cache, not for CPU flops."),(0,i.kt)("li",{parentName:"ul"},"Arrays beat linked lists for traversal. Contiguity wins."),(0,i.kt)("li",{parentName:"ul"},"Reorder struct members to reduce size; smaller objects mean more cache residency."),(0,i.kt)("li",{parentName:"ul"},"Avoid storing derivable data twice unless you can enforce consistency behind an API.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How to think like this")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Start with the interface. Implement internals later."),(0,i.kt)("li",{parentName:"ul"},"Keep the language simple; build tools to amplify it."),(0,i.kt)("li",{parentName:"ul"},"Fix code now. Technical debt compounds."),(0,i.kt)("li",{parentName:"ul"},"Build a mountain: reusable libraries under small apps. Own the hard parts.")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/@TsodingDaily"},(0,i.kt)("strong",{parentName:"a"},"Tsoding Daily \u2014 YouTube Channel"))),(0,i.kt)("p",null,"A channel by Tsoding featuring live coding streams and videos focused on building projects from scratch, experimenting with algorithms, implementing tools in C and other languages, exploring low-level programming, and working through game and graphics development challenges. Sessions often include problem-solving in real time, code refactoring, performance tuning, and occasional forays into esoteric programming concepts."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://brennan.io/projects/"},(0,i.kt)("strong",{parentName:"a"},"brennan.io/projects: Stephen Brennan"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/cbot"},"brenns10/cbot: CBot - IRC bot in C"),"\nLoads plugins as shared libraries, stores plugin state in SQL, and uses cooperative threading to handle IRC I/O alongside tasks like HTTP requests.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/sos"},"brenns10/sos: SOS - minimal 32-bit ARM OS"),"\nImplements isolated processes, preemptive multitasking, and early FAT filesystem support, targeting Raspberry Pi and QEMU.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/minesweeper"},"brenns10/minesweeper: Minesweeper in C"),"\nMinesweeper playable via CLI, GTK, or ncurses, including an interactive solver.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://sr.ht/~brenns10/funlisp"},"funlisp: Lisp interpreter in C89"),"\nPortable Lisp interpreter for POSIX systems, implemented in compact and readable C89.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/kchat"},"brenns10/kchat: KChat kernel module"),"\nKernel module that creates a device file for real-time chat between processes.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/sshell"},"brenns10/sshell: A Simple Shell in C"),"\nMinimal shell showcasing parsing, built-ins, and process launching.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/tetris"},"brenns10/tetris: Tetris in C"),"\nNcurses terminal Tetris clone with gravity, rotation, wall-kick, scoring, levels, pause, and save/load.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/libstephen"},"brenns10/libstephen: Libstephen"),"\nC library with data structures, argument parsing, regex, logging, and testing.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/brenns10/nosj"},"brenns10/nosj: NOSJ"),"\nLightweight JSON parser in C with a focus on clarity and simplicity."))),(0,i.kt)("p",null,"2025-10-03 ",(0,i.kt)("a",{parentName:"p",href:"https://build-your-own-x.vercel.app/"},"Build Your Own X")," {build-your-own-x.vercel.app}"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This repo is forked from awesome ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/danistefanovic/build-your-own-x"},"anistefanovic/build-your-own-x")," , site is created and maintained by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kjj6198/build-your-own-x"},"Kalan")," which converted github README.md to website, and probably will add more opinionated resource.\nFollow me on ",(0,i.kt)("a",{parentName:"p",href:"https://build-your-own-x.vercel.app/twitter.com/kalanyei"},"Twitter")," or contibute your article link on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kjj6198/build-your-own-x"},"Github")," is always welcomed!\n",(0,i.kt)("img",{alt:"image-20251003134405839",src:a(53966).Z,width:"1062",height:"838"}))),(0,i.kt)("blockquote",null,(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cstack.github.io/db_tutorial/"},"Let's Build a Simple Database")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://web.archive.org/web/20210803115658/https://fabxc.org/tsdb/"},"Writing a Time Series Database from scratch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.lizzie.io/linux-containers-in-500-loc.html"},"Linux containers in 500 lines of code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/bumble-tech/home-grown-bytecode-interpreters-51e12d59b25c"},"Home-grown bytecode interpreters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://web.archive.org/web/20200121100942/https://blog.felixangell.com/virtual-machine-in-c/"},"Virtual machine in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cturt.github.io/cinoop.html"},"Writing a Game Boy emulator, Cinoop")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://handmadehero.org/"},"Handmade Hero")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nesdoug.com/"},"How to Program an NES game in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLZ1QII7yudbc-Ky058TEaOstZHVbT-2hg"},"Chess Engine In C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLSkJey49cOgTSj465v2KbLZ7LMn10bCF9"},"Let's Make: Dangerous Dave")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLT6WFYYZE6uLMcPGS3qfpYm7T_gViYMMt"},"Learn Video Game Programming in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLkTXsX7igf8edTYU92nU-f5Ntzuf-RKvW"},"Coding A Sudoku Solver in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLkTXsX7igf8erbWGYT4iSAhpnJLJ0Nk5G"},"Coding a Rogue/Nethack RPG in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brennan.io/2015/06/12/tetris-reimplementation/"},"On Tetris and Reimplementation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://beej.us/guide/bgnet/"},"Beej's Guide to Network Programming")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/"},"Let's code a TCP/IP stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=ZjwvMcP3Nf0&list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX"},"Building a software and hardware stack for a simple computer from scratch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://tuhdo.github.io/os01/"},"Operating Systems: From 0 to 1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.toptal.com/game/video-game-physics-part-i-an-introduction-to-rigid-body-dynamics"},"Video Game Physics Tutorial")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/"},"Baby's First Garbage Collector")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.buildyourownlisp.com/"},"Build Your Own Lisp: Learn C and build your own programming language in 1000 lines of code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://maplant.com/gc.html"},"Writing a Simple Garbage Collector in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lotabout/write-a-C-interpreter"},"C interpreter that interprets itself.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/lotabout/Let-s-build-a-compiler"},'A C & x86 version of the "Let\'s Build a Compiler" by Jack Crenshaw')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/DoctorWkt/acwj"},"A journey explaining how to build a compiler from scratch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html"},"A Regular Expression Matcher")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://swtch.com/~rsc/regexp/regexp1.html"},"Regular Expression Matching Can Be Simple And Fast")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brennan.io/2015/01/16/write-a-shell-in-c/"},"Tutorial - Write a Shell in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/kamalmarhubi/shell-workshop"},"Let's build a shell!")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://indradhanush.github.io/blog/writing-a-unix-shell-part-1/"},"Writing a UNIX Shell")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/tokenrove/build-your-own-shell"},"Build Your Own Shell")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://viewsourcecode.org/snaptoken/kilo/"},"Build Your Own Text Editor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://medium.com/from-the-scratch/http-server-what-do-you-need-to-know-to-build-a-simple-http-server-from-scratch-d1ef8945e4fa"},"Build a HTTP Server from Scratch in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://dranger.com/ffmpeg/ffmpeg.html"},"How to Write a Video Player in Less Than 1000 Lines")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/jamesroutley/write-a-hash-table"},"Learn how to write a hash table in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.uninformativ.de/blog/postings/2018-02-24/0/POSTING-en.html"},"The very basics of a terminal emulator")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brennan.io/2016/11/14/kernel-dev-ep3/"},"Write a System Call")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://codepr.github.io/posts/sol-mqtt-broker"},"Sol - An MQTT broker from scratch"))),(0,i.kt)("p",{parentName:"blockquote"},"2025-10-03 ",(0,i.kt)("a",{parentName:"p",href:"https://build-your-own-x.vercel.app/#build-your-own-git"},"Build Your Own X")," {build-your-own-x.vercel.app}")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"salvatore-antirez-sanfilippo--blog"},(0,i.kt)("a",{parentName:"h3",href:"https://antirez.com/news/108"},"Salvatore \u201cantirez\u201d Sanfilippo \u2014 Blog")),(0,i.kt)("p",null,"Antirez is best known for Redis, but his hobby C work shows how far careful constraints can go. He builds small tools with clear goals, minimal dependencies, and sharp terminal UX. His writing focuses on tradeoffs and the craft of making something useful with very little code."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://antirez.com/news/108"},"Writing an editor in less than 1000 lines of code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/antirez/kilo"},"Kilo source code"))),(0,i.kt)("h3",{id:"stephen-brennan--blog"},(0,i.kt)("a",{parentName:"h3",href:"https://brennan.io/"},"Stephen Brennan \u2014 Blog")),(0,i.kt)("p",null,"Stephen writes approachable guides that turn scary systems topics into weekend projects. He explains the why first, then the how, and backs it with complete C code. You come away understanding processes, terminals, and state machines, not just copying snippets."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brennan.io/2015/01/16/write-a-shell-in-c/"},"Write a Shell in C")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/brenns10/lsh"},"lsh source code")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://brennan.io/2015/06/12/tetris-reimplementation/"},"On Tetris and Reimplementation"))),(0,i.kt)("h3",{id:"connor-stack-cstack--tutorial-series"},(0,i.kt)("a",{parentName:"h3",href:"https://cstack.github.io/db_tutorial/"},"Connor Stack (cstack) \u2014 Tutorial Series")),(0,i.kt)("p",null,"Connor documents the internals of a tiny database from disk layout to B-trees. The series treats each concept as a unit you can implement and test. It is a practical path into storage engines, paging, and binary formats using plain C."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cstack.github.io/db_tutorial/"},"Let\u2019s Build a Simple Database")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cstack/db_tutorial"},"Project repository and notes"))),(0,i.kt)("h3",{id:"arjun-sreedharan--blog"},(0,i.kt)("a",{parentName:"h3",href:"https://arjunsreedharan.org/"},"Arjun Sreedharan \u2014 Blog")),(0,i.kt)("p",null,"Arjun shows systems programming from first principles. He starts at a bootloader and builds up, or starts at sbrk and builds a malloc. Each post breaks the work into crisp steps you can run and verify, which makes deep topics feel tractable."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arjunsreedharan.org/post/82710718100/kernels-101-lets-write-a-kernel"},"Kernels 101, Let\u2019s write a Kernel")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory-allocator"},"Memory Allocators 101, Write a simple memory allocator"))),(0,i.kt)("h3",{id:"dan-luu--articles"},(0,i.kt)("a",{parentName:"h3",href:"https://danluu.com/"},"Dan Luu \u2014 Articles")),(0,i.kt)("p",null,"Dan writes hands-on systems pieces with measurement and debugging front and center. His malloc tutorial is a guided tour of implementing, testing, and stress-testing an allocator against real programs. You learn both mechanics and methodology."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://danluu.com/malloc-tutorial/"},"Malloc Tutorial, Let\u2019s write a malloc"))),(0,i.kt)("h3",{id:"daniel-holden--build-your-own-lisp"},(0,i.kt)("a",{parentName:"h3",href:"http://www.buildyourownlisp.com/"},"Daniel Holden \u2014 Build Your Own Lisp")),(0,i.kt)("p",null,"Holden turns interpreter writing into a structured C learning path. You build a small Lisp, add parsing, evaluation, and a rudimentary GC, and finish with a working REPL. The book is friendly, incremental, and big on exercises."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://www.buildyourownlisp.com/"},"Build Your Own Lisp, free online book")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/orangeduck/BuildYourOwnLisp"},"Lispy source code"))),(0,i.kt)("h3",{id:"robert-nystrom--crafting-interpreters"},(0,i.kt)("a",{parentName:"h3",href:"https://craftinginterpreters.com/"},"Robert Nystrom \u2014 Crafting Interpreters")),(0,i.kt)("p",null,"Nystrom teaches language implementation with clarity and momentum. The first half builds a bytecode VM in C for Lox. You implement scanning, parsing, a stack VM, a compiler, and memory management with a focus on correctness and readability."),(0,i.kt)("p",null,"Notable projects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://craftinginterpreters.com/"},"Crafting Interpreters, C VM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/munificent/craftinginterpreters"},"clox source code"))),(0,i.kt)("h3",{id:"more-to-explore"},"More to explore"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://beej.us/guide/bgnet/"},"Beej\u2019s Guide to Network Programming")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://littleosbook.github.io/"},"The Little OS Book")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/"},"Let\u2019s code a TCP/IP stack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://wiki.osdev.org/Main_Page"},"OSDev Wiki"))),(0,i.kt)("h2",{id:"libraries"},"Libraries"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/stclib/STC"},"stclib/STC: STC - Generic Containers and Algorithms for C"))),(0,i.kt)("p",null,"A header-only C99/C11 library providing type-safe generic containers, algorithms, and utilities with minimal boilerplate. Includes dynamic arrays, deques, queues, stacks, priority queues, hash maps, ordered maps/sets, UTF-8 strings with short-string optimization, bitsets, random number generation, regex, ranges, and coroutines. Type safety is enforced at compile time using templated macros, and ergonomic iteration helpers simplify code."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define T Floats, float\n#include <stc/vec.h>\n\nFloats nums = {0};\nFloats_push(&nums, 10.f);\nFloats_push(&nums, 20.f);\n\nfor (c_each(it, Floats, nums))\n    printf(" %g", *it.ref);\nFloats_drop(&nums);\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nothings/stb"},(0,i.kt)("strong",{parentName:"a"},"nothings/stb: Single-file public-domain libraries for C/C++"))),(0,i.kt)("p",null,"A set of single-header libraries providing drop-in, zero-dependency solutions for C/C++. Includes image loading, writing, and resizing; TrueType font rasterization; dynamic arrays and hash tables; noise generation; text editing; and voxel rendering. All files are small, self-contained, and easy to embed or modify."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#define STB_IMAGE_IMPLEMENTATION\n#include "stb_image.h"\n\nint x, y, n;\nunsigned char *data = stbi_load("image.png", &x, &y, &n, 0);\nif (data) {\n    // use image data\n    stbi_image_free(data);\n}\n')),(0,i.kt)("h2",{id:"books"},"Books"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.buildyourownlisp.com/contents"},(0,i.kt)("strong",{parentName:"a"},"Build Your Own Lisp \u2014 Table of Contents"))),(0,i.kt)("p",null,"An online book that guides you step-by-step through implementing a Lisp interpreter in C. It begins with C language basics, environment setup, and building a simple REPL, then progresses into parsing expressions, evaluating code, adding error handling, implementing Lisp data structures like S-expressions and Q-expressions, and creating variables, functions, conditionals, and strings. Later chapters cover building a standard library and extending the language with advanced features such as macros, native data types, garbage collection, and tail-call optimization. The project is designed to be hands-on, with each chapter resulting in working code that gradually evolves into a complete interpreter."))}m.isMDXComponent=!0},53966:function(e,t,a){t.Z=a.p+"assets/images/image-20251003134405839-5b9871851d942c98970d3142ebe823d1.png"}}]);