"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[1925],{96080:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(667);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43857:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var a=n(54570),r=n(89462),o=(n(667),n(96080)),i=["components"],s={},l="dev-bicep",p={unversionedId:"dev-bicep",id:"dev-bicep",title:"dev-bicep",description:"Date: 2025-07-19",source:"@site/docs/dev-bicep.md",sourceDirName:".",slug:"/dev-bicep",permalink:"/docs/dev-bicep",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev-bicep.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"design-assets",permalink:"/docs/design-assets"},next:{title:"dev-cpp-snippets",permalink:"/docs/dev-cpp-snippets"}},u=[{value:"Tools",id:"tools",children:[],level:2},{value:"Official Reference from MSFT",id:"official-reference-from-msft",children:[],level:2},{value:"Bicep Guide",id:"bicep-guide",children:[],level:2},{value:"What is a cheat sheet?",id:"what-is-a-cheat-sheet",children:[],level:2},{value:"What is Azure Bicep?",id:"what-is-azure-bicep",children:[],level:2},{value:"Topics",id:"topics",children:[],level:2},{value:"Topics",id:"topics-1",children:[{value:"Create a resource",id:"create-a-resource",children:[],level:3},{value:"Create a child resource",id:"create-a-child-resource",children:[{value:"Via name",id:"via-name",children:[],level:4},{value:"Via parent property",id:"via-parent-property",children:[],level:4},{value:"Via parent resource",id:"via-parent-resource",children:[],level:4}],level:3},{value:"Reference to an existing resource",id:"reference-to-an-existing-resource",children:[],level:3},{value:"Access a nested resource (::)",id:"access-a-nested-resource-",children:[],level:3},{value:"Declare a variable",id:"declare-a-variable",children:[],level:3},{value:"Declare a parameter",id:"declare-a-parameter",children:[],level:3},{value:"Declare a secure parameter",id:"declare-a-secure-parameter",children:[],level:3},{value:"Declare an output",id:"declare-an-output",children:[],level:3},{value:"String interpolation",id:"string-interpolation",children:[],level:3},{value:"Multi-line strings",id:"multi-line-strings",children:[],level:3},{value:"Create a module",id:"create-a-module",children:[],level:3},{value:"Reference to a module using a bicep registry",id:"reference-to-a-module-using-a-bicep-registry",children:[],level:3},{value:"If condition",id:"if-condition",children:[],level:3},{value:"Ternary if/else condition",id:"ternary-ifelse-condition",children:[],level:3},{value:"foreach using an array",id:"foreach-using-an-array",children:[],level:3},{value:"foreach using an array of objects",id:"foreach-using-an-array-of-objects",children:[],level:3},{value:"Example data",id:"example-data",children:[],level:3},{value:"filter() function",id:"filter-function",children:[{value:"returns",id:"returns",children:[],level:4}],level:3},{value:"map() function",id:"map-function",children:[{value:"returns",id:"returns-1",children:[],level:4}],level:3},{value:"sort() function",id:"sort-function",children:[{value:"returns",id:"returns-2",children:[],level:4}],level:3},{value:"Primitive types",id:"primitive-types",children:[],level:3},{value:"A custom type that enforced an array with a specific object structure",id:"a-custom-type-that-enforced-an-array-with-a-specific-object-structure",children:[],level:3},{value:"Optional properties in objects (using ?)",id:"optional-properties-in-objects-using-",children:[],level:3},{value:"User-defined function syntax",id:"user-defined-function-syntax",children:[],level:3},{value:"Basic user-defined function",id:"basic-user-defined-function",children:[],level:3},{value:"User-defined function with parameters",id:"user-defined-function-with-parameters",children:[],level:3},{value:"User-defined function return types",id:"user-defined-function-return-types",children:[],level:3},{value:"export() decorator (shared.bicep)",id:"export-decorator-sharedbicep",children:[],level:3},{value:"import statement",id:"import-statement",children:[],level:3},{value:"import statement with alias",id:"import-statement-with-alias",children:[],level:3},{value:"import statement using a wildcard",id:"import-statement-using-a-wildcard",children:[],level:3},{value:"parseCidr() function",id:"parsecidr-function",children:[{value:"returns",id:"returns-3",children:[],level:4}],level:3},{value:"cidrSubnet() function",id:"cidrsubnet-function",children:[{value:"returns",id:"returns-4",children:[],level:4}],level:3},{value:"cidrHost() function",id:"cidrhost-function",children:[{value:"returns",id:"returns-5",children:[],level:4}],level:3},{value:"Azure Container Registry configuration",id:"azure-container-registry-configuration",children:[],level:3},{value:"Implicit dependency using symbolic name",id:"implicit-dependency-using-symbolic-name",children:[],level:3},{value:"Explicit dependency using dependsOn",id:"explicit-dependency-using-dependson",children:[],level:3},{value:"Azure CLI",id:"azure-cli",children:[],level:3},{value:"Azure PowerShell",id:"azure-powershell",children:[],level:3},{value:"Target scopes",id:"target-scopes",children:[],level:3},{value:"Azure Verified Modules reference",id:"azure-verified-modules-reference",children:[],level:3}],level:2},{value:"UniqueString-based Naming",id:"uniquestring-based-naming",children:[],level:2},{value:"Standard Naming Convention",id:"standard-naming-convention",children:[],level:2},{value:"Default Parameters and Overrides",id:"default-parameters-and-overrides",children:[],level:2},{value:"Parameter Constraints (<code>@allowed</code>)",id:"parameter-constraints-allowed",children:[],level:2},{value:"Secure Parameters (<code>@secure</code>)",id:"secure-parameters-secure",children:[],level:2},{value:"Conditional Resource Deployment (<code>if</code> on resources)",id:"conditional-resource-deployment-if-on-resources",children:[],level:2},{value:"Conditional Modules (<code>if</code> on modules)",id:"conditional-modules-if-on-modules",children:[],level:2},{value:"\u201cNew or Existing\u201d Resources Pattern",id:"new-or-existing-resources-pattern",children:[],level:2},{value:"Loops \u2013 Multiple Resource Instances",id:"loops--multiple-resource-instances",children:[],level:2},{value:"Loops \u2013 Multiple Module Deployments",id:"loops--multiple-module-deployments",children:[],level:2},{value:"Loops in Child Properties (Nested Loops)",id:"loops-in-child-properties-nested-loops",children:[],level:2},{value:"Loops with Conditions",id:"loops-with-conditions",children:[],level:2},{value:"Module Reuse (Local Modules)",id:"module-reuse-local-modules",children:[],level:2},{value:"Registry Modules (Versioned Reuse)",id:"registry-modules-versioned-reuse",children:[],level:2},{value:"Outputs from Modules",id:"outputs-from-modules",children:[],level:2},{value:"Conditional Expressions (<code>?:</code>)",id:"conditional-expressions-",children:[],level:2},{value:"Referencing Existing Resources (Same Scope)",id:"referencing-existing-resources-same-scope",children:[],level:2},{value:"Referencing Existing Resources (Cross-Scope)",id:"referencing-existing-resources-cross-scope",children:[],level:2},{value:"Tags Pattern",id:"tags-pattern",children:[],level:2},{value:"Default Location Parameter",id:"default-location-parameter",children:[],level:2},{value:"Base Name Variable Pattern",id:"base-name-variable-pattern",children:[],level:2},{value:"Object/Array Parameter Configurations",id:"objectarray-parameter-configurations",children:[],level:2},{value:"Secure Outputs (<code>@secure()</code>)",id:"secure-outputs-secure",children:[],level:2},{value:"Subscription-Level Deployment (<code>targetScope</code>)",id:"subscription-level-deployment-targetscope",children:[],level:2},{value:"(Additional Notes)",id:"additional-notes",children:[],level:2},{value:"Other resources",id:"other-resources",children:[],level:2},{value:"Inspiration and use-cases",id:"inspiration-and-use-cases",children:[],level:2}],c={toc:u};function d(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dev-bicep"},"dev-bicep"),(0,o.kt)("p",null,"Date: 2025-07-19"),(0,o.kt)("p",null,"[","[",(0,o.kt)("em",{parentName:"p"},"TOC"),"]","]"),(0,o.kt)("h2",{id:"tools"},"Tools"),(0,o.kt)("p",null," ",(0,o.kt)("a",{parentName:"p",href:"https://azure.github.io/bicep/"},"Bicep Playground")," { azure.github.io }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"I hope it still works! Amazing online tool to learn bicep!"),(0,o.kt)("p",{parentName:"blockquote"},"I've used it with Azure Bicep Cheat Sheet below."),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("img",{alt:"2025-07-19",src:n(327).Z,width:"1147",height:"493"}))),(0,o.kt)("h2",{id:"official-reference-from-msft"},"Official Reference from MSFT"),(0,o.kt)("p",null,"2025-07-19 ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/templates/microsoft.automation/automationaccounts?pivots=deployment-language-bicep"},"Microsoft.Automation/automationAccounts - Bicep, ARM template & Terraform AzAPI reference | Microsoft Learn")," { learn.microsoft.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Yay!")),(0,o.kt)("p",null,"2025-07-20 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-docs-bicep-samples/blob/main/samples/loops/loopproperty.bicep"},"azure-docs-bicep-samples/samples/loops/loopproperty.bicep at main \xb7 Azure/azure-docs-bicep-samples")," { github.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Maybe okayish, but a bit outdated. Check the recent resource version. "),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("img",{alt:"image-20250719231321178",src:n(48938).Z,width:"1297",height:"924"}))),(0,o.kt)("h2",{id:"bicep-guide"},"Bicep Guide"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/nnellans/bicep-guide"},"nnellans/bicep-guide: Bicep Guide")," { github.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"by Nathan Nellans"),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("img",{alt:"image-20250719230246949",src:n(73937).Z,width:"919",height:"744"}))),(0,o.kt)("h1",{id:"azure-bicep-cheat-sheet"},"Azure Bicep Cheat Sheet"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Source:"),"  ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/johnlokerse/azure-bicep-cheat-sheet"},"johnlokerse/azure-bicep-cheat-sheet: Quick-reference guide on Azure Bicep \ud83d\udcaa\ud83c\udffb")," { github.com }"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"img",src:n(44144).Z,width:"1536",height:"1024"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"This is a copy of the cheat sheet created by ",(0,o.kt)("a",{parentName:"strong",href:"https://github.com/johnlokerse"},"John Lokerse"),".")," "),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"what-is-a-cheat-sheet"},"What is a cheat sheet?"),(0,o.kt)("p",null,"A cheat sheet is a concise set of notes or a reference guide used for quick retrieval of essential information. It's often a single page that contains summaries, commands, formulas, or procedures that someone might need to reference frequently, especially when learning a new topic or skill."),(0,o.kt)("h2",{id:"what-is-azure-bicep"},"What is Azure Bicep?"),(0,o.kt)("p",null,"Azure Bicep is a domain-specific language (also known as DSL) designed by Microsoft for defining and deploying Azure resources in a declarative manner. It's the next generation of Azure Resource Manager (ARM) templates, offering a cleaner syntax, improved type safety, and better support for modularization. While ARM templates use JSON syntax, Bicep uses a more concise syntax that aims to make it easier for developers to author and maintain Azure deployments."),(0,o.kt)("h2",{id:"topics"},"Topics"),(0,o.kt)("h2",{id:"topics-1"},"Topics"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"[!NOTE]","\nClick the arrow next to a topic to expand its content.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Basics")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Declarations of new and existing resources, variables, parameters and outputs, etcetera."))),(0,o.kt)("h3",{id:"create-a-resource"},"Create a resource"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=how%20to%20define%20a%20resource%20in%20azure%20bicep"},"GitHub Copilot Prompt - Learn more on resource creation")),(0,o.kt)("p",null,"how to define a resource in azure bicep"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resourceName 'ResourceType@version' = {\n  name: 'exampleResourceName'\n  properties: {\n    // resource properties here\n  }\n}\n")),(0,o.kt)("h3",{id:"create-a-child-resource"},"Create a child resource"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Can%20you%20explain%20the%20differences%20between%20creating%20child%20resources%20in%20Azure%20Bicep%20using%20a%20name%20property,%20using%20a%20parent%20property,%20and%20nesting%20them%20within%20a%20parent%20resource%20block?%20Please%20include%20examples%20and%20clarify%20when%20to%20use%20each%20approach."},"GitHub Copilot Prompt - Learn more about creating child resources")),(0,o.kt)("h4",{id:"via-name"},"Via name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resVnet 'Microsoft.Network/virtualNetworks@2022-01-01' = {\n  name: 'my-vnet'\n}\n\nresource resChildSubnet 'Microsoft.Network/virtualNetworks/subnets@2022-01-01' = {\n  name: '${resVnet}/my-subnet'\n}\n")),(0,o.kt)("h4",{id:"via-parent-property"},"Via parent property"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resVnet 'Microsoft.Network/virtualNetworks@2022-01-01' = {\n  name: 'my-vnet'\n}\n\nresource resChildSubnet 'Microsoft.Network/virtualNetworks/subnets@2022-01-01' = {\n  name: 'my-subnet'\n  parent: resVnet\n}\n")),(0,o.kt)("h4",{id:"via-parent-resource"},"Via parent resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resVnet 'Microsoft.Network/virtualNetworks@2022-01-01' = {\n  name: 'my-vnet'\n\n  resource resChildSubnet 'subnets' = {\n    name: 'my-subnet'\n  }\n}\n")),(0,o.kt)("h3",{id:"reference-to-an-existing-resource"},"Reference to an existing resource"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resKeyVaultRef 'Microsoft.KeyVault/vaults@2019-09-01' = existing {\n  name: 'myExistingKeyVaultName'\n}\n")),(0,o.kt)("h3",{id:"access-a-nested-resource-"},"Access a nested resource (::)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resVnet 'Microsoft.Network/virtualNetworks@2022-01-01' existing = {\n  name: 'my-vnet'\n  resource resChildSubnet 'subnets' existing = {\n    name: 'my-subnet'\n  }\n}\n\n// access child resource\noutput outChildSubnetId string = resVnet::resChildSubnet.id\n")),(0,o.kt)("h3",{id:"declare-a-variable"},"Declare a variable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"var varEnvironment = 'dev'\n")),(0,o.kt)("p",null,"There is no need to declare a datatype for a variable, because the type is inferred from the value."),(0,o.kt)("h3",{id:"declare-a-parameter"},"Declare a parameter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param parStorageAccountName string\nparam parLocation string = resourceGroup().location\n")),(0,o.kt)("p",null,"Available datatypes are: ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"custom (user defined type)"),"."),(0,o.kt)("h3",{id:"declare-a-secure-parameter"},"Declare a secure parameter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"@secure()\nparam parSecureParameter string\n")),(0,o.kt)("h3",{id:"declare-an-output"},"Declare an output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resPublicIp 'Microsoft.Network/publicIPAddresses@2023-02-01' ={\n  name: parPublicIpName\n  tags: parTags\n  location: parLocation\n  zones: parAvailabilityZones\n  sku: parPublicIpSku\n  properties: parPublicIpProperties\n}\n\noutput outPublicIpId string = resPublicIp.id\noutput outMyString string = 'Hello!'\n")),(0,o.kt)("p",null,"Available datatypes are: ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"array")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"custom (user defined type)"),"."),(0,o.kt)("h3",{id:"string-interpolation"},"String interpolation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"var varGreeting = 'Hello'\noutput outResult string = '${varGreeting} World'\n")),(0,o.kt)("h3",{id:"multi-line-strings"},"Multi-line strings"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"var varMultiLineString = '''\n  This is a\n  Muli-line string\n  variable.\n'''\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Modules")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Split your deployment into smaller, reusable components."))),(0,o.kt)("h3",{id:"create-a-module"},"Create a module"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Can%20you%20explain%20what%20Azure%20Bicep%20modules%20are%20and%20how%20they%20work?%20Also,%20how%20can%20you%20reference%20a%20module%20stored%20in%20an%20external%20Azure%20Container%20Registry%20(ACR)?"},"GitHub Copilot Prompt")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"module modVirtualNetwork './network.bicep' = {\n  name: 'networkModule'\n  params: {\n    parLocation: 'westeurope'\n    parVnetName: 'my-vnet-name'\n  }\n}\n")),(0,o.kt)("h3",{id:"reference-to-a-module-using-a-bicep-registry"},"Reference to a module using a bicep registry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"module modBicepRegistryReference 'br/<bicep registry name>:<file path>:<tag>' = {\n  name: 'deployment-name'\n  params: {}\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Conditions")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Resource definitions based on conditions."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=How%20do%20conditions%20work%20in%20Azure%20Bicep?%20Can%20you%20explain%20it%20in%20detail%20and%20provide%20examples%20of%20how%20to%20use%20conditions%20to%20control%20resource%20deployment%20or%20property%20values?"},"GitHub Copilot - Learn more about conditions")),(0,o.kt)("h3",{id:"if-condition"},"If condition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param parDeployResource bool\n\nresource resDnsZone 'Microsoft.Network/dnszones@2018-05-01' = if (parDeployResource) {\n  name: 'myZone'\n  location: 'global'\n}\n")),(0,o.kt)("h3",{id:"ternary-ifelse-condition"},"Ternary if/else condition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param parEnvironment string\n\nvar varSku = parEnvironment == 'prod' ? 'premium' : 'standard'\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Loops")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Loop constructions."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=How%20do%20you%20create%20loops%20in%20Azure%20Bicep?%20Can%20you%20show%20examples%20using%20the%20for%20keyword%20to%20deploy%20multiple%20resources%20or%20set%20values%20in%20an%20array?"},"GitHub Copilot - Learn more about loops")),(0,o.kt)("h3",{id:"foreach-using-an-array"},"foreach using an array"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param parStorageAccountNames array = [\n  'storageaccount1'\n  'storageaccount2'\n  'storageaccount3'\n]\n\nresource resStorageAccounts 'Microsoft.Storage/storageAccounts@2021-04-01' = [for name in parStorageAccountNames: {\n  name: name\n  location: 'westeurope'\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_LRS'\n  }\n}]\n")),(0,o.kt)("h3",{id:"foreach-using-an-array-of-objects"},"foreach using an array of objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param parStorageAccountNames array = [\n  {\n    name: 'storageaccount1'\n    kind: 'StorageV2'\n    sku: {\n      name: 'Standard_LRS'\n    }\n  }\n  {\n    name: 'storageaccount2'\n    kind: 'StorageV2'\n    sku: {\n      name: 'Standard_LRS'\n    }\n  }\n]\n\nresource resStorageAccounts 'Microsoft.Storage/storageAccounts@2021-04-01' = [for storageAccount in parStorageAccountNames: {\n  name: storageAccount.name\n  location: 'westeurope'\n  kind: storageAccount.kind\n  sku: {\n    name: storageAccount.sku\n  }\n}]\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Data manipulation")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Functions used to manipulate data."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=In%20Azure%20Bicep,%20how%20do%20the%20filter(),%20map(),%20and%20sort()%20functions%20work?%20Can%20you%20explain%20each%20function%20in%20detail%20and%20show%20how%20they%E2%80%99re%20used%20in%20practice?%20For%20example:%20%E2%80%A2output%20outProducts%20array%20=%20filter(varGroceryStore,%20item%20=%3E%20item.productPrice%20%3E=%204)%20%E2%80%A2output%20outDiscount%20array%20=%20map(range(0,%20length(varGroceryStore)),%20item%20=%3E%20%7B%20productNumber:%20item,%20productName:%20varGroceryStore%5Bitem%5D.productName,%20discountedPrice:%20%27The%20item%20$%7BvarGroceryStore%5Bitem%5D.productName%7D%20is%20on%20sale.%20Sale%20price:%20$%7B(varGroceryStore%5Bitem%5D.productPrice%20/%202)%7D%27%20%7D)%20%E2%80%A2output%20outUsingSort%20array%20=%20sort(varGroceryStore,%20(a,%20b)%20=%3E%20a.productPrice%20%3C=%20b.productPrice)%20Please%20walk%20through%20what%20each%20of%20these%20functions%20does%20and%20when%20to%20use%20them"},"GitHub Copilot - Learn more about lambda functions")),(0,o.kt)("h3",{id:"example-data"},"Example data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"var varGroceryStore = [\n  {\n    productName: 'Icecream'\n    productPrice: 2\n    productCharacteristics: [\n      'Vegan'\n      'Seasonal'\n    ]\n  }\n  {\n    productName: 'Banana'\n    productPrice: 4\n    productCharacteristics: [\n      'Bio'\n    ]\n  }\n]\n")),(0,o.kt)("h3",{id:"filter-function"},"filter() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"  output outProducts array = filter(varGroceryStore, item => item.productPrice >= 4)\n")),(0,o.kt)("h4",{id:"returns"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "productName": "Banana",\n    "productPrice": 4,\n    "productCharacteristics": [\n      "Bio"\n    ]\n  }\n]\n')),(0,o.kt)("h3",{id:"map-function"},"map() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output outDiscount array = map(range(0, length(varGroceryStore)), item => {\n  productNumber: item\n  productName: varGroceryStore[item].productName\n  discountedPrice: 'The item ${varGroceryStore[item].productName} is on sale. Sale price: ${(varGroceryStore[item].productPrice / 2)}'\n})\n")),(0,o.kt)("h4",{id:"returns-1"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "productNumber": 0,\n    "productName": "Icecream",\n    "discountedPrice": "The item Icecream is on sale. Sale price: 1"\n  },\n  {\n    "productNumber": 1,\n    "productName": "Banana",\n    "discountedPrice": "The item Banana is on sale. Sale price: 2"\n  }\n]\n')),(0,o.kt)("h3",{id:"sort-function"},"sort() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output outUsingSort array = sort(varGroceryStore, (a, b) => a.productPrice <= b.productPrice)\n")),(0,o.kt)("h4",{id:"returns-2"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "productName": "Icecream",\n    "productPrice": 2,\n    "productCharacteristics": [\n      "Vegan"\n      "Seasonal"\n    ]\n  },\n  {\n    "productName": "Banana",\n    "productPrice": 4,\n    "productCharacteristics": [\n      "Bio"\n    ]\n  }\n]\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"User Defined Types")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Define custom complex data structures."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Can%20you%20explain%20in%20detail%20how%20User%20Defined%20Types%20work%20in%20Azure%20Bicep?%20Please%20include%20examples%20of%20defining%20custom%20object%20types,%20including%20how%20to%20structure%20them%20and%20how%20to%20define%20optional%20properties.%20Optional%20properties%20should%20be%20defined%20using%20a%20?%20at%20the%20type%20level%20(e.g.,%20type%20Bla%20=%20%7B%20name:%20string?%20%7D).%20Also%20include%20examples%20of%20arrays%20of%20objects%20with%20optional%20properties,%20such%20as:type%20arrayWithObjectsType%20=%20%7B%20name:%20string%20age:%20int%20hasChildren:%20bool?%20hasPets:%20bool?%20%7D%5B%5D"},"GitHub Copilot - Learn more on User Defined Types")),(0,o.kt)("h3",{id:"primitive-types"},"Primitive types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"// a string type with two allowed strings ('Standard_LRS' or 'Standard_GRS')\ntype skuType = 'Standard_LRS' | 'Standard_GRS'\n\n// an integer type with one allowed value (1337)\ntype integerType = 1337\n\n// an boolean type with one allowed value (true)\ntype booleanType = true\n\n// Reference the type\nparam parMyStringType skuType\nparam parMyIntType integerType\nparam parMyBoolType booleanType\n")),(0,o.kt)("h3",{id:"a-custom-type-that-enforced-an-array-with-a-specific-object-structure"},"A custom type that enforced an array with a specific object structure"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"type arrayWithObjectsType = {\n  name: string\n  age: int\n}[]\n\nparam parCustomArray arrayWithObjectsType = [\n  {\n    name: 'John'\n    age: 30\n  }\n]\n")),(0,o.kt)("h3",{id:"optional-properties-in-objects-using-"},"Optional properties in objects (using ?)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"type arrayWithObjectsType = {\n  name: string\n  age: int\n  hasChildren: bool?\n  hasPets: bool?\n}[]\n\nparam parCustomArray arrayWithObjectsType = [\n  {\n    name: 'John'\n    age: 30\n  }\n  {\n    name: 'Jane'\n    age: 31\n    hasPets: true\n  }\n  {\n    name: 'Jack'\n    age: 45\n    hasChildren: true\n    hasPets: true\n  }\n]\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"User Defined Functions")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Define custom complex expressions."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Can%20you%20explain%20in%20detail%20how%20User%20Defined%20Functions%20work%20in%20Azure%20Bicep?%20Please%20include%20examples%20that%20show%20how%20to%20define%20and%20use%20custom%20functions,%20including%20parameter%20definitions,%20return%20types,%20and%20function%20logic.%20Also%20include%20a%20simple%20example%20such%20as:func%20funcSayHelloTo()%20string%20=%3E%20%27Hello%20and%20welcome,%20John%20Doe%27%20output%20outName%20string%20=%20funcSayHelloTo()%20/*%20Outputs:%20%27Hello%20and%20welcome,%20John%20Doe%27%20*/"},"GitHub Copilot - Learn more about User Defined Functions")),(0,o.kt)("h3",{id:"user-defined-function-syntax"},"User-defined function syntax"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"func <function-name> (<parameter-name> <data-type>) <return-type> => <expression>")),(0,o.kt)("h3",{id:"basic-user-defined-function"},"Basic user-defined function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"func funcSayHelloTo() string => 'Hello and welcome, John Doe'\n")),(0,o.kt)("h3",{id:"user-defined-function-with-parameters"},"User-defined function with parameters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"func funcSayHelloTo(name string) string => 'Hello and welcome, ${name}'\n")),(0,o.kt)("p",null,"With multiple parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"func funcPersonNameAndAge(name string, age int) string => 'My name is ${name} and my age is ${age}'\n")),(0,o.kt)("h3",{id:"user-defined-function-return-types"},"User-defined function return types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"func funcReturnTypeArray() array => [1, 2, 3, 4, 5]\nfunc funcReturnTypeObject() object => {name: 'John Doe', age: 31}\nfunc funcReturnTypeInt() int => 1337\nfunc funcReturnTypeBool(key string) bool => contains({}, key)\nfunc funcReturnTypeUserDefinedType() customTypeUsedAsReturnType => {\n  hello: 'world'\n}\n\ntype customTypeUsedAsReturnType = {\n  hello: string\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Compile-time imports")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Import and export() enable reuse of user-defined types variables, functions.",(0,o.kt)("br",null),"Supported in Bicep and Bicepparam files."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Show%20me%20how%20to%20use%20export%20and%20import%20in%20Azure%20Bicep%20to%20reuse%20a%20storage%20account%20resource%20across%20multiple%20Bicep%20files."},"GitHub Copilot - learn more about compile-time imports")),(0,o.kt)("h3",{id:"export-decorator-sharedbicep"},"export() decorator (shared.bicep)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"@export()\nvar region = 'we'\n\n@export()\ntype tagsType = {\n  Environment: 'Prod' | 'Dev' | 'QA' | 'Stage' | 'Test'\n  CostCenter: string\n  Owner: string\n  BusinessUnit: string\n  *: string\n}\n")),(0,o.kt)("h3",{id:"import-statement"},"import statement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"import { region, tagsType } from 'shared.bicep'\n\noutput outRegion string = region\noutput outTags tagsType = {\n  Environment: 'Dev'\n  CostCenter: '12345'\n  BusinessUnit: 'IT'\n  Owner: 'John Lokerse'\n}\n")),(0,o.kt)("h3",{id:"import-statement-with-alias"},"import statement with alias"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"using 'keyVault.bicep'\nimport { region as importRegion } from 'shared.bicep'\n\nparam parKeyVaultName = 'kv-${importRegion}-${uniqueString(importRegion)}'\n")),(0,o.kt)("h3",{id:"import-statement-using-a-wildcard"},"import statement using a wildcard"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"import * as shared from 'shared.bicep'\n\noutput outRegion string = shared.region\noutput outTags shared.tagsType = {\n  Environment: 'Dev'\n  CostCenter: '12345'\n  BusinessUnit: 'IT'\n  Owner: 'John Lokerse'\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Networking")),(0,o.kt)("p",null,(0,o.kt)("i",null,"CIDR functions to make subnetting easier."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Can%20you%20explain%20how%20to%20use%20CIDR%20functions%20in%20Azure%20Bicep%20to%20make%20subnetting%20easier?%20Show%20how%20functions%20like%20cidrSubnet(),%20cidrHost()%20and%20others%20help%20to%20calculate%20subnet%20ranges,%20addresses,%20or%20specific%20IPs%20based%20on%20a%20base%20CIDR%20block.%20Include%20practical%20examples%20such%20as%20splitting%20a%20/16%20address%20space%20into%20multiple%20/24%20subnets."},"GitHub Copilot - learn more about the networking functions")),(0,o.kt)("h3",{id:"parsecidr-function"},"parseCidr() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output outParseCidrInformation object = parseCidr('192.168.1.0/24')\n")),(0,o.kt)("h4",{id:"returns-3"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"outParseCidrInformation": {\n  "type": "Object",\n  "value": {\n    "broadcast": "192.168.1.255",\n    "cidr": 24,\n    "firstUsable": "192.168.1.1",\n    "lastUsable": "192.168.1.254",\n    "netmask": "255.255.255.0",\n    "network": "192.168.1.0"\n  }\n}\n')),(0,o.kt)("h3",{id:"cidrsubnet-function"},"cidrSubnet() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output outCidrSubnet string = cidrSubnet('192.168.1.0/24', 25, 0)\n")),(0,o.kt)("h4",{id:"returns-4"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"outCidrSubnet": {\n  "type": "String",\n  "value": "192.168.1.0/25"\n}\n')),(0,o.kt)("h3",{id:"cidrhost-function"},"cidrHost() function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output outCidrHost array = [for i in range(0, 10): cidrHost('192.168.1.0/24', i)]\n")),(0,o.kt)("h4",{id:"returns-5"},"returns"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"outCidrHost": {\n  "type": "Array",\n  "value": [\n    "192.168.1.1",\n    "192.168.1.2",\n    "192.168.1.3",\n    "192.168.1.4",\n    "192.168.1.5",\n    "192.168.1.6",\n    "192.168.1.7",\n    "192.168.1.8",\n    "192.168.1.9",\n    "192.168.1.10"\n  ]\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Bicepconfig")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Customize your Bicep development experience."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=Tell%20me%20more%20about%20the%20bicepconfig.json%20in%20Azure%20Bicep.%20What%20does%20it%20do%20and%20why%20do%20I%20need%20it?"},"GitHub Copilot - Learn more about bicepconfig.json")),(0,o.kt)("h3",{id:"azure-container-registry-configuration"},"Azure Container Registry configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "moduleAliases": {\n    "br": {\n      "<bicep registry name>": {\n        "registry": "<url to registry>",\n        "modulePath": "<module path of the alias>"\n      }\n    }\n  }\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Dependencies")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Implicit and explicit dependencies."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=How%20do%20dependencies%20work%20in%20Azure%20Bicep?%20Explain%20it%20to%20me%20in%20detail%20and%20add%20examples."},"GitHub Copilot - learn more about dependencies")),(0,o.kt)("h3",{id:"implicit-dependency-using-symbolic-name"},"Implicit dependency using symbolic name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resNetworkSecurityGroup 'Microsoft.Network/networkSecurityGroups@2019-11-01' = {\n  name: 'my-networkSecurityGroup'\n  location: resourceGroup().location\n}\n\nresource nsgRule 'Microsoft.Network/networkSecurityGroups/securityRules@2019-11-01' = {\n  name: '${resNetworkSecurityGroup}/AllowAllRule'\n  properties: {\n    // resource properties here\n  }\n}\n")),(0,o.kt)("h3",{id:"explicit-dependency-using-dependson"},"Explicit dependency using dependsOn"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource resDnsZone 'Microsoft.Network/dnsZones@2018-05-01' = {\n  name: 'contoso.com'\n  location: 'global'\n}\n\nmodule modVirtualNetwork './network.bicep' = {\n  name: 'networkModule'\n  params: {\n    parLocation: 'westeurope'\n    parVnetName: 'my-vnet-name'\n  }\n  dependsOn: [\n    resDnsZone\n  ]\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Deployment")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Orchestration commands to deploy Azure Bicep to your Azure Environment."))),(0,o.kt)("h3",{id:"azure-cli"},"Azure CLI"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Scope"),(0,o.kt)("th",{parentName:"tr",align:null},"Command"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resourceGroup"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"az deployment group create --resource-group ResourceGroupName --template-file template.bicep --parameters parameters.bicepparam"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"subscription"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"az deployment sub create --location location --template-file template.bicep --parameters parameters.bicepparam"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"managementGroup"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"az deployment mg create --management-group-id ManagementGroupId --template-file template.bicep --parameters parameters.bicepparam"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"tenant"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"az deployment tenant create --location location --template-file template.bicep --parameters parameters.bicepparam"))))),(0,o.kt)("h3",{id:"azure-powershell"},"Azure PowerShell"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Scope"),(0,o.kt)("th",{parentName:"tr",align:null},"Command"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resourceGroup"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'New-AzResourceGroupDeployment -ResourceGroupName "ResourceGroupName" -TemplateFile "template.bicep" -TemplateParameterFile "parameters.bicepparam'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"subscription"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'New-AzDeployment -Location "Location" -TemplateFile "template.bicep" -TemplateParameterFile "parameters.bicepparam"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"managementGroup"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'New-AzManagementGroupDeployment -ManagementGroupId "ManagementGroupId" -Location "location" -TemplateFile "template.bicep" -TemplateParameterFile "parameters.bicepparam"'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"tenant"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'New-AzTenantDeployment -Location "Location" -TemplateFile "template.bicep" -TemplateParameterFile "parameters.bicepparam"')))))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Target Scopes")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Deployment scope definitions."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=What%20are%20target%20scopes%20in%20Azure%20Bicep%20when%20deploying%20to%20Azure?"},"GitHub Copilot - Learn more about target scopes")),(0,o.kt)("h3",{id:"target-scopes"},"Target scopes"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"targetScope")," directive in Azure Bicep determines the level at which the Bicep template will be deployed within Azure. The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"targetScope = 'resourceGroup'"),"."),(0,o.kt)("p",null,"Azure Bicep supports multiple levels of ",(0,o.kt)("inlineCode",{parentName:"p"},"targetScope"),":"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Scope"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"resourceGroup"),(0,o.kt)("td",{parentName:"tr",align:null},"The Bicep file is intended to be deployed at the Resource Group level.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"subscription"),(0,o.kt)("td",{parentName:"tr",align:null},"The Bicep file targets a Subscription, allowing you to manage resources or configurations across an entire subscription.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"managementGroup"),(0,o.kt)("td",{parentName:"tr",align:null},"For managing resources or configurations across multiple subscriptions under a specific Management Group.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"tenant"),(0,o.kt)("td",{parentName:"tr",align:null},"The highest scope, targeting the entire Azure tenant. This is useful for certain global resources or policies.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"targetScope = 'resourceGroup'\n\nresource resKeyVault 'Microsoft.KeyVault/vaults@2019-09-01' = {\n  // key vault properties here\n}\n")),(0,o.kt)("p",null,"Use the scope property on modules to deploy on a different scope than the target scope:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"// Uses the targetScope\nmodule modStorageModule1 'storage.bicep' = {\n  name: 'storageModule1'\n}\n\n// Uses the scope of the module\nmodule modStorageModule2 'storage.bicep' = {\n  name: 'storageModule2'\n  scope: resourceGroup('other-subscription-id', 'other-resource-group-name')\n  // module properties here\n}\n"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("span",null,(0,o.kt)("b",null,"Azure Verified Modules")),(0,o.kt)("p",null,(0,o.kt)("i",null,"Microsoft building blocks for Azure Bicep right at your fingertips."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/copilot?prompt=What%20are%20Azure%20Verified%20Modules%20(https://aka.ms/avm),%20and%20how%20can%20I%20use%20them%20in%20my%20Azure%20Bicep%20files?%20Please%20explain%20their%20purpose,%20benefits,%20and%20show%20an%20example%20of%20how%20to%20reference%20and%20deploy%20a%20verified%20module%20in%20a%20Bicep%20template."},"GitHub Copilot - Learn more about Azure Verified Modules")),(0,o.kt)("h3",{id:"azure-verified-modules-reference"},"Azure Verified Modules reference"),(0,o.kt)("p",null,"When you're writing Bicep, you can reference Azure Verified Modules (AVM) directly in your Bicep files. To get access to the IntelliSense prompt, you need the Azure Bicep VSCode extension installed. Additionally, to restore the Bicep modules successfully, make sure you have access to the Microsoft Container Registry at mcr.microsoft.com."),(0,o.kt)("p",null,"As an example, here is how to reference to an Azure Key Vault from the Microsoft Container Registry:"),(0,o.kt)("p",null,"More information on Azure Verified Modules can be found ",(0,o.kt)("a",{parentName:"p",href:"https://aka.ms/avm"},"here"),".")),(0,o.kt)("h1",{id:"popular-azure-bicep-patterns"},"Popular Azure Bicep Patterns"),(0,o.kt)("p",null,"(GPT Research)"),(0,o.kt)("p",null,"Below are many common Bicep coding patterns used in enterprise-grade deployments. Each pattern includes a code example (with sample output where appropriate) and an explanation, along with references to official documentation or community examples."),(0,o.kt)("h2",{id:"uniquestring-based-naming"},"UniqueString-based Naming"),(0,o.kt)("p",null,"Developers often build resource names by combining meaningful prefixes with the ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString()")," function to guarantee global uniqueness. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param env string = 'prod'\nparam appName string = 'myApp'\nparam storageAccountName string = '${appName}-${env}-${uniqueString(resourceGroup().id)}'\n\nresource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {\n  name: storageAccountName\n  location: resourceGroup().location\n  sku: { name: 'Standard_LRS' }\n  kind: 'StorageV2'\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output Example:")," If ",(0,o.kt)("inlineCode",{parentName:"p"},"resourceGroup().id")," is ",(0,o.kt)("inlineCode",{parentName:"p"},'"RG/123"')," this might produce a name like ",(0,o.kt)("inlineCode",{parentName:"p"},"myApp-prod-zcztcwvu6iyg6"),". The 13-character suffix (",(0,o.kt)("inlineCode",{parentName:"p"},"zcztcwvu6iyg6")," in this case) comes from ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString()"),". This pattern ensures ",(0,o.kt)("em",{parentName:"p"},"deterministic")," yet unique names (the same RG ID yields the same suffix) and incorporates a human-readable prefix for context."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Azure resource names often must be globally unique. Embedding ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString(resourceGroup().id)")," (or similar seeds like subscription ID) with a descriptive prefix creates names that differ per environment or project yet remain repeatable across deployments."),(0,o.kt)("h2",{id:"standard-naming-convention"},"Standard Naming Convention"),(0,o.kt)("p",null,"Many teams follow a structured naming convention (environment, application code, etc.) via string interpolation. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param shortAppName string = 'app'\nparam shortEnv string = 'prod'\nparam appServiceName string = '${shortAppName}-${shortEnv}-${uniqueString(resourceGroup().id)}'\n\nresource webApp 'Microsoft.Web/sites@2022-09-01' = {\n  name: appServiceName\n  location: resourceGroup().location\n  kind: 'app'\n  // ...\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output Example:")," With ",(0,o.kt)("inlineCode",{parentName:"p"},"shortAppName='app'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"shortEnv='prod'"),", a sample name could be ",(0,o.kt)("inlineCode",{parentName:"p"},"app-prod-0a1b2c3d4e5f"),". This combines meaningful parts (",(0,o.kt)("inlineCode",{parentName:"p"},"app-prod"),") with ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString()")," to avoid collisions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Embedding environment tags or application codes in names makes them ",(0,o.kt)("strong",{parentName:"p"},"meaningful")," (e.g. indicating \u201cprod\u201d vs \u201cdev\u201d), while ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString()")," adds a unique suffix. Microsoft documentation explicitly recommends using string interpolation with ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString")," to build names that are unique, deterministic, and informative."),(0,o.kt)("h2",{id:"default-parameters-and-overrides"},"Default Parameters and Overrides"),(0,o.kt)("p",null,"It\u2019s common to define resource names (or other values) as parameters with sensible defaults that users can override. For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param resourcePrefix string = 'contoso' \nparam location string = resourceGroup().location\nparam saName string = '${resourcePrefix}sa${uniqueString(resourceGroup().id)}'\n\nresource storageAccount 'Microsoft.Storage/storageAccounts@2023-04-01' = {\n  name: saName\n  location: location\n  // ...\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output Example:")," With defaults above, the storage account might be ",(0,o.kt)("inlineCode",{parentName:"p"},"contososa-zcztcwvu6iyg6"),". If the user needs a different naming scheme, they can override ",(0,o.kt)("inlineCode",{parentName:"p"},"resourcePrefix")," or pass a completely different ",(0,o.kt)("inlineCode",{parentName:"p"},"saName"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Bicep best practices advise using parameters (with defaults) for values that may change between deployments. This makes the template reusable: defaults (like low-cost SKUs or test names) apply out-of-the-box, but operators can override them."),(0,o.kt)("h2",{id:"parameter-constraints-allowed"},"Parameter Constraints (",(0,o.kt)("inlineCode",{parentName:"h2"},"@allowed"),")"),(0,o.kt)("p",null,"Templates often include parameters for things like environments or SKUs, with an ",(0,o.kt)("inlineCode",{parentName:"p"},"@allowed")," decorator to restrict values. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"@allowed([\n  'dev'\n  'test'\n  'prod'\n])\nparam environment string = 'dev'\n\n@allowed([\n  'Standard_LRS'\n  'Standard_GRS'\n])\nparam storageSku string = 'Standard_LRS'\n")),(0,o.kt)("p",null,"This ensures only permitted values are supplied. In a different context, the ",(0,o.kt)("strong",{parentName:"p"},"new vs existing resource")," example uses ",(0,o.kt)("inlineCode",{parentName:"p"},"@allowed")," for ",(0,o.kt)("inlineCode",{parentName:"p"},'"new"/"existing"')," choices."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Enforcing allowed values prevents misconfiguration (e.g. disallowing unsupported SKUs). It makes the template self-documenting about valid inputs."),(0,o.kt)("h2",{id:"secure-parameters-secure"},"Secure Parameters (",(0,o.kt)("inlineCode",{parentName:"h2"},"@secure"),")"),(0,o.kt)("p",null,"Sensitive inputs (passwords, secrets) should be marked with ",(0,o.kt)("inlineCode",{parentName:"p"},"@secure"),". Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"@secure()\nparam adminPassword string\n\nresource sqlServer 'Microsoft.Sql/servers@2021-02-01' = {\n  name: 'sql-${uniqueString(resourceGroup().id)}'\n  properties: {\n    administratorLogin: 'adminUser'\n    administratorLoginPassword: adminPassword\n  }\n}\n")),(0,o.kt)("p",null,"Bicep treats these values securely (they aren\u2019t logged or stored in deployment history)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Enterprise deployments often include secrets. Marking them secure prevents accidental exposure. ARM/Bicep will mask secure parameters or values in logs, as recommended in official guidance."),(0,o.kt)("h2",{id:"conditional-resource-deployment-if-on-resources"},"Conditional Resource Deployment (",(0,o.kt)("inlineCode",{parentName:"h2"},"if")," on resources)"),(0,o.kt)("p",null,"Bicep\u2019s ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," expression can toggle resource creation. For example, to deploy a DNS zone only when requested:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param deployDns bool = true\n\nresource dnsZone 'Microsoft.Network/dnsZones@2023-07-01' = if (deployDns) {\n  name: 'myZone'\n  location: 'global'\n}\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"deployDns")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", the resource is skipped."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," It allows one template to handle multiple scenarios (e.g. dev vs prod). Users can flip features on/off via parameters. This pattern is explicitly documented: \u201cUse an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," expression in the resource declaration. When the condition is false, the resource isn\u2019t created\u201d."),(0,o.kt)("h2",{id:"conditional-modules-if-on-modules"},"Conditional Modules (",(0,o.kt)("inlineCode",{parentName:"h2"},"if")," on modules)"),(0,o.kt)("p",null,"Similarly, you can conditionally deploy a module. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param createWebApp bool = false\n\nmodule webAppModule 'webApp.bicep' = if (createWebApp) {\n  name: 'deployWebApp'\n  params: { appName: 'myWebApp'; location: location }\n}\n")),(0,o.kt)("p",null,"Here ",(0,o.kt)("inlineCode",{parentName:"p"},"webApp.bicep")," only runs if ",(0,o.kt)("inlineCode",{parentName:"p"},"createWebApp == true"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Large deployments often have optional components. For instance, only deploy an App Service in certain environments. Wrapping modules in ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," keeps templates concise and flexible."),(0,o.kt)("h2",{id:"new-or-existing-resources-pattern"},"\u201cNew or Existing\u201d Resources Pattern"),(0,o.kt)("p",null,"A common enterprise pattern is letting the user choose \u201cnew\u201d vs \u201cexisting\u201d for a resource. For example, to either create a storage account or use an existing one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param saName string\nparam location string = resourceGroup().location\n\n@allowed(['new','existing'])\nparam mode string = 'new'\n\nresource saNew 'Microsoft.Storage/storageAccounts@2023-04-01' = if (mode == 'new') {\n  name: saName\n  location: location\n  sku: { name: 'Standard_LRS' }\n  kind: 'StorageV2'\n}\n\nresource saExisting 'Microsoft.Storage/storageAccounts@2023-04-01' existing = if (mode == 'existing') {\n  name: saName\n}\n\noutput storageAccountId string = \n  (mode == 'new') ? saNew.id : saExisting.id\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output Example:")," If ",(0,o.kt)("inlineCode",{parentName:"p"},"mode")," is ",(0,o.kt)("inlineCode",{parentName:"p"},'"new"'),", the template creates a new account and outputs its ID. If ",(0,o.kt)("inlineCode",{parentName:"p"},'"existing"'),", it skips creation and instead looks up the existing account\u2019s ID."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Enterprises often integrate new deployments with existing resources. This pattern (shown in docs) uses conditional blocks and the ",(0,o.kt)("inlineCode",{parentName:"p"},"existing")," keyword to flexibly handle both cases in one template."),(0,o.kt)("h2",{id:"loops--multiple-resource-instances"},"Loops \u2013 Multiple Resource Instances"),(0,o.kt)("p",null,"Bicep supports ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loops to create multiple copies of a resource. For example, to make N storage accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param location string = resourceGroup().location\nparam storageCount int = 3\n\nresource storageAccts 'Microsoft.Storage/storageAccounts@2023-05-01' = [for i in range(0, storageCount): {\n  name: 'stg${i}${uniqueString(resourceGroup().id)}'\n  location: location\n  sku: { name: 'Standard_LRS' }\n  kind: 'StorageV2'\n}]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Output Example:")," If ",(0,o.kt)("inlineCode",{parentName:"p"},"storageCount=3"),", this creates 3 storage accounts named like ",(0,o.kt)("inlineCode",{parentName:"p"},"stg0abc123..."),", ",(0,o.kt)("inlineCode",{parentName:"p"},"stg1def456..."),", ",(0,o.kt)("inlineCode",{parentName:"p"},"stg2ghi789..."),". You can then reference them as ",(0,o.kt)("inlineCode",{parentName:"p"},"storageAccts[0]"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"storageAccts[1]"),", etc."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Loops eliminate repetitive code and allow dynamic scaling. This pattern is documented as \u201ccreate multiple resource instances\u201d. Each loop index (",(0,o.kt)("inlineCode",{parentName:"p"},"i"),") can be used in names or properties."),(0,o.kt)("h2",{id:"loops--multiple-module-deployments"},"Loops \u2013 Multiple Module Deployments"),(0,o.kt)("p",null,"In the same way, you can deploy multiple instances of a module. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param location string = resourceGroup().location\nparam vmCount int = 2\n\nmodule vmModule 'vmTemplate.bicep' = [for i in range(0, vmCount): {\n  name: 'deployVm${i}'\n  params: {\n    vmName: 'vm${i}'\n    location: location\n  }\n}]\n\noutput vmIds array = [for i in range(0, vmCount): vmModule[i].outputs.vmId]\n")),(0,o.kt)("p",null,"This deploys ",(0,o.kt)("inlineCode",{parentName:"p"},"vmTemplate.bicep")," twice with different parameters, and collects their output IDs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Scaling out resources (VMs, subnets, etc.) is common. Using loops to instantiate modules keeps code DRY and lets you parametrize the count."),(0,o.kt)("h2",{id:"loops-in-child-properties-nested-loops"},"Loops in Child Properties (Nested Loops)"),(0,o.kt)("p",null,"You can loop inside a resource\u2019s properties. For example, defining multiple subnets in a VNet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param location string = resourceGroup().location\n\nvar subnets = [\n  { name: 'api'; subnetPrefix: '10.0.0.0/24' }\n  { name: 'worker'; subnetPrefix: '10.0.1.0/24' }\n]\n\nresource vnet 'Microsoft.Network/virtualNetworks@2023-11-01' = {\n  name: 'vnet1'\n  location: location\n  properties: {\n    addressSpace: {\n      addressPrefixes: ['10.0.0.0/16']\n    }\n    subnets: [for sn in subnets: {\n      name: sn.name\n      properties: { addressPrefix: sn.subnetPrefix }\n    }]\n  }\n}\n")),(0,o.kt)("p",null,"This creates a single VNet with two subnets (",(0,o.kt)("inlineCode",{parentName:"p"},"api")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"worker"),") using one loop."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Often a resource has a collection child (like subnets). Loops make it easy to define them from data. The official docs highlight looping in nested objects for exactly this purpose."),(0,o.kt)("h2",{id:"loops-with-conditions"},"Loops with Conditions"),(0,o.kt)("p",null,"You can combine loops with conditions. For example, deploy up to N resources but only if a flag is true:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param createResources bool = true\nparam resourceCount int = 3\nparam location string = resourceGroup().location\n\nvar baseName = 'stor${uniqueString(resourceGroup().id)}'\n\nmodule storageMod 'storageAccount.bicep' = [for i in range(0, resourceCount): if (createResources) {\n  name: 'deploy${i}${baseName}'\n  params: { \n    storageName: '${i}${baseName}'\n    location: location\n  }\n}]\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"createResources")," is false, the loop yields no instances. If true, it deploys ",(0,o.kt)("inlineCode",{parentName:"p"},"resourceCount")," modules. Loop-with-",(0,o.kt)("inlineCode",{parentName:"p"},"if")," is demonstrated in docs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," This pattern allows conditional scale-out. For example, you might allow an admin to choose whether multiple instances should be created at all. It combines flexibility of loops with ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),"-based gating."),(0,o.kt)("h2",{id:"module-reuse-local-modules"},"Module Reuse (Local Modules)"),(0,o.kt)("p",null,"Large deployments are broken into reusable modules. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param location string = resourceGroup().location\n\nresource plan 'Microsoft.Web/serverfarms@2021-02-01' = {\n  name: 'myAppPlan'\n  location: location\n  sku: { name: 'B1'; tier: 'Basic' }\n}\n\nmodule webApp 'modules/webApp.bicep' = {\n  name: 'webAppModule'\n  params: {\n    appName: 'myWebApp'\n    location: location\n    appServicePlanId: plan.id\n  }\n}\n\nmodule sqlDb 'modules/sqlDatabase.bicep' = {\n  name: 'sqlModule'\n  params: {\n    serverName: 'mySqlServer'\n    databaseName: 'myDatabase'\n    location: location\n  }\n}\n")),(0,o.kt)("p",null,"This calls separate Bicep files for each component. The ",(0,o.kt)("a",{parentName:"p",href:"https://iamachs.com/blog/azure-bicep/part-4-master-modules-guide/"},"iaMachs guide")," shows the same idea: splitting App Service, SQL, storage into modules."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Modularization is key for maintainability. It lets teams develop and version components (e.g. a standard webApp module) and keeps main files concise."),(0,o.kt)("h2",{id:"registry-modules-versioned-reuse"},"Registry Modules (Versioned Reuse)"),(0,o.kt)("p",null,"Beyond local files, modules can be pulled from an Azure Container Registry with a version tag. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"module vnet 'br:myregistry.azurecr.io/shared-modules/networking/vnet:1.0.0' = {\n  name: 'vnetDeployment'\n  params: { vnetName: 'project-vnet'; addressPrefixes: ['10.1.0.0/16'] }\n}\n")),(0,o.kt)("p",null,"This references a published VNet module in ACR. The ",(0,o.kt)("a",{parentName:"p",href:"https://iamachs.com/blog/azure-bicep/part-4-master-modules-guide/"},"iaMachs example")," shows using the ",(0,o.kt)("inlineCode",{parentName:"p"},"br:")," syntax to fetch a shared \u201cvnet\u201d module from a registry."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Enterprises often maintain a library of standardized modules. Referencing them by URL and version number ensures consistency and enables version control of infrastructure components."),(0,o.kt)("h2",{id:"outputs-from-modules"},"Outputs from Modules"),(0,o.kt)("p",null,"Modules can return outputs to the parent template. For example, if ",(0,o.kt)("inlineCode",{parentName:"p"},"webApp.bicep")," defines:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource webApp 'Microsoft.Web/sites@2022-09-01' = { name: appName; ... }\noutput defaultHostName string = webApp.properties.defaultHostName\n")),(0,o.kt)("p",null,"then the parent can capture it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"module webApp 'webApp.bicep' = {\n  name: 'webAppModule'; params: { appName: 'myApp'; location: location; ... }\n}\noutput webAppUrl string = webApp.outputs.defaultHostName\n")),(0,o.kt)("p",null,"This pattern (seen in the ",(0,o.kt)("a",{parentName:"p",href:"https://iamachs.com/blog/azure-bicep/part-4-master-modules-guide/"},"iaMachs example"),") allows you to pass values (like hostnames, IDs) back up."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Modules encapsulate resources but sometimes you need their results (e.g. an endpoint URL) in the main template. Exporting outputs from modules and then using them avoids hardcoding and re-querying resources. It\u2019s a best practice to pass values this way."),(0,o.kt)("h2",{id:"conditional-expressions-"},"Conditional Expressions (",(0,o.kt)("inlineCode",{parentName:"h2"},"?:"),")"),(0,o.kt)("p",null,"Bicep supports the ternary ",(0,o.kt)("inlineCode",{parentName:"p"},"? :")," operator for concise logic in variables or outputs. For example, continuing the \u201cnew vs existing\u201d pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"output storageAccountId string = \n  (newOrExisting == 'new') ? saNew.id : saExisting.id\n")),(0,o.kt)("p",null,"This chooses between ",(0,o.kt)("inlineCode",{parentName:"p"},"saNew.id")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"saExisting.id")," based on the mode. This exact snippet appears in the docs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," It\u2019s a compact way to select values. Instead of writing an ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," block around outputs, you can inline conditional logic. This often appears in outputs or variables when a decision depends on a parameter."),(0,o.kt)("h2",{id:"referencing-existing-resources-same-scope"},"Referencing Existing Resources (Same Scope)"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"existing")," keyword to refer to an Azure resource already created. For example, to get an existing storage account in the current RG:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' existing = {\n  name: 'examplestorage'\n}\n\noutput blobEndpoint string = stg.properties.primaryEndpoints.blob\n")),(0,o.kt)("p",null,"This does ",(0,o.kt)("strong",{parentName:"p"},"not")," create a new storage account. It simply lets you access properties (here ",(0,o.kt)("inlineCode",{parentName:"p"},"primaryEndpoints.blob"),") of that named account."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Often, a deployment needs to reference an existing resource (like a Key Vault or VNet) to retrieve information. ",(0,o.kt)("inlineCode",{parentName:"p"},"existing")," is the official Bicep construct for this (instead of, say, using ",(0,o.kt)("inlineCode",{parentName:"p"},"resourceId()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"reference()"),"). It ensures the resource is only looked up and not redeployed."),(0,o.kt)("h2",{id:"referencing-existing-resources-cross-scope"},"Referencing Existing Resources (Cross-Scope)"),(0,o.kt)("p",null,"You can reference resources in another resource group (or subscription/management group) by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," property. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource otherStg 'Microsoft.Storage/storageAccounts@2023-04-01' existing = {\n  name: 'examplestorage'\n  scope: resourceGroup('OtherResourceGroup')\n}\n\noutput blobEndpoint string = otherStg.properties.primaryEndpoints.blob\n")),(0,o.kt)("p",null,"This grabs ",(0,o.kt)("inlineCode",{parentName:"p"},"examplestorage")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"OtherResourceGroup"),". The docs give a similar example (see the \u201cDifferent scope\u201d section)."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Large solutions span multiple RGs or subscriptions. Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"scope")," lets you reference a resource by name in the right RG. This avoids hardcoding IDs and keeps templates flexible."),(0,o.kt)("h2",{id:"tags-pattern"},"Tags Pattern"),(0,o.kt)("p",null,"Tagging resources is critical in enterprise for governance/billing. Two common patterns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Inline tags:")," Define tags per resource (static or via expressions)."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource stg 'Microsoft.Storage/storageAccounts@2021-04-01' = {\n  name: 'stg${uniqueString(resourceGroup().id)}'\n  location: location\n  tags: {\n    Dept: 'Finance'\n    Environment: 'Production'\n    LastDeployed: utcNow('yyyy-MM-dd')\n  }\n}\n")),(0,o.kt)("p",{parentName:"li"},"This example (from Microsoft docs) shows literal tag values and one from a parameter (",(0,o.kt)("inlineCode",{parentName:"p"},"utcNow")," date).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Object or union-based tags:")," Define a common tags object and merge it. For instance, a parameter or variable ",(0,o.kt)("inlineCode",{parentName:"p"},"commonTags = { Dept: 'Finance'; Owner: 'Ops' }"),", then use ",(0,o.kt)("inlineCode",{parentName:"p"},"tags: union(commonTags, { specificTag: 'X'})"),". The ",(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/69350105"},"StackOverflow solution")," illustrates this using ",(0,o.kt)("inlineCode",{parentName:"p"},"union(commonTags, { additionalTag: 'value' })"),"."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Tagging consistently is a best practice. Developers either hard-code tags inline or maintain a central tags object (possibly parameterized) and merge in resource-specific tags. This pattern is documented (apply tags in Bicep)."),(0,o.kt)("h2",{id:"default-location-parameter"},"Default Location Parameter"),(0,o.kt)("p",null,"A very common shortcut is to default the ",(0,o.kt)("inlineCode",{parentName:"p"},"location")," parameter to the resource group\u2019s location:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param location string = resourceGroup().location\n")),(0,o.kt)("p",null,"This way, deployments automatically use the RG\u2019s location unless overridden."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Nearly all resources require a location. Defaulting it to ",(0,o.kt)("inlineCode",{parentName:"p"},"resourceGroup().location")," saves users from having to specify it each time, and ensures resources deploy to the same region as the RG."),(0,o.kt)("h2",{id:"base-name-variable-pattern"},"Base Name Variable Pattern"),(0,o.kt)("p",null,"Often templates define a \u201cbase\u201d name or prefix as a ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," to reuse in multiple places. Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"var baseName = 'store${uniqueString(resourceGroup().id)}'\n\nresource storage1 'Microsoft.Storage/storageAccounts@2023-05-01' = {\n  name: '${baseName}01'\n  // ...\n}\nresource storage2 'Microsoft.Storage/storageAccounts@2023-05-01' = {\n  name: '${baseName}02'\n  // ...\n}\n")),(0,o.kt)("p",null,"This avoids repeating the ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString(...)")," call. In the loops example above, ",(0,o.kt)("inlineCode",{parentName:"p"},"baseName")," was used as well."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Reusing a computed base string (like ",(0,o.kt)("inlineCode",{parentName:"p"},"uniqueString"),") keeps names consistent and code DRY. It also guarantees related resources share the same suffix."),(0,o.kt)("h2",{id:"objectarray-parameter-configurations"},"Object/Array Parameter Configurations"),(0,o.kt)("p",null,"Complex settings can be passed as objects or arrays rather than many parameters. For instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"param vNetSettings object = {\n  name: 'VNet1'\n  location: 'eastus'\n  addressPrefixes: [\n    { name: 'firstPrefix'; addressPrefix: '10.0.0.0/22' }\n  ]\n  subnets: [\n    { name: 'apiSubnet'; addressPrefix: '10.0.0.0/24' }\n    { name: 'workerSubnet'; addressPrefix: '10.0.1.0/24' }\n  ]\n}\n\nresource vnet 'Microsoft.Network/virtualNetworks@2023-11-01' = {\n  name: vNetSettings.name\n  location: vNetSettings.location\n  properties: {\n    addressSpace: { addressPrefixes: [vNetSettings.addressPrefixes[0].addressPrefix] }\n    subnets: [for sn in vNetSettings.subnets: {\n      name: sn.name\n      properties: { addressPrefix: sn.addressPrefix }\n    }]\n  }\n}\n")),(0,o.kt)("p",null,"This pattern (shown in Microsoft docs) packs related values into one object parameter."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Passing grouped values as a single object/array makes templates cleaner and more extensible. It\u2019s easier to manage one parameter than many, especially for structured configuration like VNet/subnet definitions."),(0,o.kt)("h2",{id:"secure-outputs-secure"},"Secure Outputs (",(0,o.kt)("inlineCode",{parentName:"h2"},"@secure()"),")"),(0,o.kt)("p",null,"When a template outputs sensitive information, mark the output secure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"@secure()\noutput dbConnString string = sqlServer.properties.fullyQualifiedDomainName\n")),(0,o.kt)("p",null,"This hides the output from logs and history."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Connection strings or keys should not appear in plain text after deployment. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"@secure()")," on outputs is a documented best practice to protect sensitive data."),(0,o.kt)("h2",{id:"subscription-level-deployment-targetscope"},"Subscription-Level Deployment (",(0,o.kt)("inlineCode",{parentName:"h2"},"targetScope"),")"),(0,o.kt)("p",null,"Large-scale templates may deploy at the subscription scope (for RGs, policies, etc.). Use ",(0,o.kt)("inlineCode",{parentName:"p"},"targetScope = 'subscription'"),". For example, to create a new resource group:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"targetScope = 'subscription'\n\nparam rgName string\nparam rgLocation string\n\nresource newRG 'Microsoft.Resources/resourceGroups@2024-11-01' = {\n  name: rgName\n  location: rgLocation\n}\n")),(0,o.kt)("p",null,"This example (from Microsoft docs) runs at subscription scope to create RGs. You can also define modules with ",(0,o.kt)("inlineCode",{parentName:"p"},"scope: newRG")," as shown in that article."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Why it Emerges:")," Enterprise scripts often need to manage RGs, budgets, or policies at the subscription or management-group level. Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"targetScope='subscription'")," is the pattern for these deployments."),(0,o.kt)("h2",{id:"additional-notes"},"(Additional Notes)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Parameter Files:")," A common practice is to use separate ",(0,o.kt)("inlineCode",{parentName:"li"},".bicepparam")," files per environment (dev/test/prod) that supply parameter values. This isn\u2019t shown above but is widely used for deployment promotion."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"API Versions:")," While not a \u201cpattern\u201d per se, always use recent API versions for resources (as best practice recommends)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resource Symbolic Names:")," Don\u2019t include \u201cName\u201d in the symbolic resource name (use e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"resource storageAccount")," not ",(0,o.kt)("inlineCode",{parentName:"li"},"resource storageAccountName"),").")),(0,o.kt)("p",null,"Each of the above patterns is widely used in production-grade Bicep files. The examples demonstrate how they work in code; the cited docs explain their rationale. By studying these patterns, you can learn industry-standard practices for naming, conditional logic, modularization, looping, and securing Bicep deployments."),(0,o.kt)("h2",{id:"other-resources"},"Other resources"),(0,o.kt)("p",null,"2025-07-19 ",(0,o.kt)("a",{parentName:"p",href:"https://gist.github.com/daveRendon/6d6d14eb5fcfffc1f07f49b98cc33d9d"},"45 days of Azure Bicep Language")," { gist.github.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Collection of articles on medium ")),(0,o.kt)("h2",{id:"inspiration-and-use-cases"},"Inspiration and use-cases"),(0,o.kt)("p",null,"2025-07-19 ",(0,o.kt)("a",{parentName:"p",href:"https://arinco.com.au/blog/deploying-an-automation-account-with-a-runbook-and-schedule-using-bicep/"},"Deploying an Automation Account with a Runbook and Schedule Using Bicep - Arinco")," { arinco.com.au }"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bicep"},"resource automationAccountModules 'Microsoft.Automation/automationAccounts/modules@2020-01-13-preview' = [for module in modules: {\n  parent: automationAccount\n  name: module.name\n  properties: {\n    contentLink: {\n      uri: module.version == 'latest' ? '${module.uri}/${module.name}' : '${module.uri}/${module.name}/${module.version}'\n      version: module.version == 'latest' ? null : module.version\n    }\n  }\n}]\n")),(0,o.kt)("p",null,"2025-07-19 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Azure/AKS-Construction/blob/d1a98d0bd12e8d1625f382e93c6478b95f186d31/bicep/automationrunbook/automation.bicep"},"AKS-Construction/bicep/automationrunbook/automation.bicep at d1a98d0bd12e8d1625f382e93c6478b95f186d31 \xb7 Azure/AKS-Construction")," { github.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This is what I needed")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"type runbookJob = {\n  scheduleName: string\n  parameters: object?\n}\n\n@description('The Runbook-Schedule Jobs to create with workflow specific parameters')\nparam runbookJobSchedule runbookJob[]\n\n@description('The name of the runbook to create')\nparam runbookName string\n\n@allowed([\n  'GraphPowerShell'\n  'Script'\n])\n@description('The type of runbook that is being imported')\nparam runbookType string = 'Script'\n\n@description('The URI to import the runbook code from')\nparam runbookUri string = ''\n\n@description('A description of what the runbook does')\nparam runbookDescription string = ''\n\nvar runbookVersion = '1.0.0.0'\nvar tomorrow = dateTimeAdd(today, 'P1D','yyyy-MM-dd')\nvar timebase = '1900-01-01'\nvar scheduleNoExpiry = '9999-12-31T23:59:00+00:00'\nvar workWeek = {weekDays: [\n                  'Monday'\n                  'Tuesday'\n                  'Wednesday'\n                  'Thursday'\n                  'Friday'\n                  ]\n                }\n\nresource automationAccount 'Microsoft.Automation/automationAccounts@2022-08-08' = {\n  name: automationAccountName\n  location: location\n  identity: {\n    type: 'SystemAssigned'\n  }\n  properties: {\n    sku: {\n      name: accountSku\n    }\n  }\n}\n\nresource automationAccountDiagLogging 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = if(!empty(loganalyticsWorkspaceId)) {\n  name: 'diags'\n  scope: automationAccount\n  properties: {\n    workspaceId: loganalyticsWorkspaceId\n    logs: [for diagCategory in diagnosticCategories: {\n      category: diagCategory\n      enabled: true\n    }]\n  }\n}\n")),(0,o.kt)("p",null,"2025-07-19 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/brianveldman/azure-bicep/blob/40b46281ee427fd43fd089c1ce81e52481cb6f5f/Maester/WebApp/modules/aa-advanced.bicep#L74"},"azure-bicep/Maester/WebApp/modules/aa-advanced.bicep at 40b46281ee427fd43fd089c1ce81e52481cb6f5f \xb7 brianveldman/azure-bicep")," { github.com }"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Another good example, but simpler to follow")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"@description('Runbook Deployment')\nresource automationAccountRunbook 'Microsoft.Automation/automationAccounts/runbooks@2023-11-01' = {\n  name: 'runBookMaester'\n  location: __location__\n  parent: automationAccount\n  properties: {\n    runbookType: 'PowerShell72'\n    logProgress: true\n    logVerbose: true\n    description: 'Runbook to execute Maester report'\n    publishContentLink: {\n      uri: __ouMaesterScriptBlobUri__\n    }\n  }\n}\n\n")),(0,o.kt)("h1",{id:"structure"},"Structure"))}d.isMDXComponent=!0},44144:function(e,t,n){t.Z=n.p+"assets/images/0RT2wqJCEM23RI7TNDBdRf3mTWoRMC3jvFhU%3D-57be1404ee3b40478458f94cbdd768f3.png"},327:function(e,t,n){t.Z=n.p+"assets/images/2025-07-19-ffbd4bf954271f209a5da8511e09409b.png"},73937:function(e,t,n){t.Z=n.p+"assets/images/image-20250719230246949-8ad2ab3ee8d84845e399ef29c3f53888.png"},48938:function(e,t,n){t.Z=n.p+"assets/images/image-20250719231321178-919e8c5a5d4a191abf76a89a2ff3ce2e.png"}}]);