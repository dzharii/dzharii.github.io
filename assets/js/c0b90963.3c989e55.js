"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[6348],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,y=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8069:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},c=void 0,s={unversionedId:"dev/dev-csharp",id:"dev/dev-csharp",title:"dev-csharp",description:"Dev C# Articles",source:"@site/docs/dev/dev-csharp.md",sourceDirName:"dev",slug:"/dev/dev-csharp",permalink:"/docs/dev/dev-csharp",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev/dev-csharp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"C++ learning resources",permalink:"/docs/dev/dev-cpp"},next:{title:"dev-design-and-process",permalink:"/docs/dev/dev-design-and-process"}},p=[{value:"Dev C# Articles",id:"dev-c-articles",children:[],level:2},{value:"Garbage Collector",id:"garbage-collector",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"dev-c-articles"},"Dev C# Articles"),(0,i.kt)("h2",{id:"garbage-collector"},"Garbage Collector"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2022-03-10 ",(0,i.kt)("a",{parentName:"p",href:"https://michaelscodingspot.com/avoid-gc-pressure/"},"8 Techniques to Avoid GC Pressure and Improve Performance in C# .NET - Michael's Coding Spot")),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},".NET provides a lot of great collections types like ",(0,i.kt)("inlineCode",{parentName:"p"},"List<T>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Dictionary<T>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"HashSet<T>"),". All those collections have dynamic size capacity. That means they automatically expand in size as you add more items."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set initial capacity for dynamic collections")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use ArrayPool for short-lived large arrays")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use Structs instead of Classes (sometimes)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avoid Finalizers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use StackAlloc for short-lived array allocations")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use StringBuilder, but not always")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Use String Interning in very specific cases")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avoid memory leaks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Summary:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Allocations should be avoided if possible."),(0,i.kt)("li",{parentName:"ul"},"Reusing memory is better than allocating new memory."),(0,i.kt)("li",{parentName:"ul"},"Allocating on the Stack is faster than allocating on the Heap."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"2022-08-07 ",(0,i.kt)("a",{parentName:"p",href:"https://neuecc.medium.com/patterns-practices-for-efficiently-handling-c-async-await-cancel-processing-and-timeouts-b419ce5f69a4"},"Patterns & Practices for efficiently handling C# async/await cancel processing and timeouts by Yoshifumi Kawai Aug, 2022 Medium")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"2022-08-01 \ud83c\udf1f ",(0,i.kt)("a",{parentName:"li",href:"https://wapplegate.com/asynchronous-programming/?utm_source=csharpdigest&utm_medium=email&utm_campaign=426"},"Asynchronous Programming in .NET - Introduction, Misconceptions, and Problems Blog"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Asynchronous Programming in .NET - Introduction, Misconceptions, and Problems"),(0,i.kt)("li",{parentName:"ul"},"Synchronous vs. Asynchronous Programming"),(0,i.kt)("li",{parentName:"ul"},"CPU-Bound vs. I/O-Bound"),(0,i.kt)("li",{parentName:"ul"},"Identifying I/O-Bound and CPU-Bound Code"),(0,i.kt)("li",{parentName:"ul"},"An I/O-Bound Async / Await Example in .NET"),(0,i.kt)("li",{parentName:"ul"},"A CPU-Bound Async / Await Example in .NET"),(0,i.kt)("li",{parentName:"ul"},"Why Should You Use Asynchronous Programming?"),(0,i.kt)("li",{parentName:"ul"},"Asynchrony is Viral"),(0,i.kt)("li",{parentName:"ul"},"Threads and the Thread-Pool"),(0,i.kt)("li",{parentName:"ul"},"The Task Type"),(0,i.kt)("li",{parentName:"ul"},"How Do the Async / Await Keywords Work?"),(0,i.kt)("li",{parentName:"ul"},"Why is it Important for Web Applications to Use Async / Await for I/O-Bound Work?"),(0,i.kt)("li",{parentName:"ul"},"Why is it Important for UI Applications to Use Async / Await for I/O-Bound and CPU-Bound Work?"),(0,i.kt)("li",{parentName:"ul"},"Doing Multiple Things at Once"),(0,i.kt)("li",{parentName:"ul"},"What Exactly Does Task.Run Do?"),(0,i.kt)("li",{parentName:"ul"},"Common Misconceptions When Using Async / Await in .NET"),(0,i.kt)("li",{parentName:"ul"},"The Biggest Problem (Sync-Over-Async)"),(0,i.kt)("li",{parentName:"ul"},"What is Thread-Pool Starvation?"),(0,i.kt)("li",{parentName:"ul"},"Full Async Reading List")))))}m.isMDXComponent=!0}}]);