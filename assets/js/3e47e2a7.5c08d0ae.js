"use strict";(self.webpackChunkzharii=self.webpackChunkzharii||[]).push([[5831],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=s(a),k=r,d=m["".concat(p,".").concat(k)]||m[k]||u[k]||o;return a?n.createElement(d,l(l({ref:t},c),{},{components:a})):n.createElement(d,l({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},17297:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var n=a(87462),r=a(63366),o=(a(67294),a(3905)),l=["components"],i={},p=void 0,s={unversionedId:"dev-csharp",id:"dev-csharp",title:"dev-csharp",description:"Dev C# Articles",source:"@site/docs/dev-csharp.md",sourceDirName:".",slug:"/dev-csharp",permalink:"/docs/dev-csharp",editUrl:"https://github.com/dzharii/dzharii.github.io/docs/dev-csharp.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dev-cpp",permalink:"/docs/dev-cpp"},next:{title:"dev-design-and-process",permalink:"/docs/dev-design-and-process"}},c=[{value:"Dev C# Articles",id:"dev-c-articles",children:[],level:2},{value:"Garbage Collector",id:"garbage-collector",children:[],level:2},{value:"Performance measurement in C#",id:"performance-measurement-in-c",children:[],level:2},{value:"Tools",id:"tools",children:[],level:2}],u={toc:c};function m(e){var t=e.components,i=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"dev-c-articles"},"Dev C# Articles"),(0,o.kt)("h2",{id:"garbage-collector"},"Garbage Collector"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"2022-03-10 ",(0,o.kt)("a",{parentName:"p",href:"https://michaelscodingspot.com/avoid-gc-pressure/"},"8 Techniques to Avoid GC Pressure and Improve Performance in C# .NET - Michael's Coding Spot")),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},".NET provides a lot of great collections types like ",(0,o.kt)("inlineCode",{parentName:"p"},"List<T>"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Dictionary<T>"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"HashSet<T>"),". All those collections have dynamic size capacity. That means they automatically expand in size as you add more items."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set initial capacity for dynamic collections")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use ArrayPool for short-lived large arrays")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use Structs instead of Classes (sometimes)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Avoid Finalizers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use StackAlloc for short-lived array allocations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use StringBuilder, but not always")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use String Interning in very specific cases")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Avoid memory leaks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Summary:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Allocations should be avoided if possible."),(0,o.kt)("li",{parentName:"ul"},"Reusing memory is better than allocating new memory."),(0,o.kt)("li",{parentName:"ul"},"Allocating on the Stack is faster than allocating on the Heap."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"2022-08-07 ",(0,o.kt)("a",{parentName:"p",href:"https://neuecc.medium.com/patterns-practices-for-efficiently-handling-c-async-await-cancel-processing-and-timeouts-b419ce5f69a4"},"Patterns & Practices for efficiently handling C# async/await cancel processing and timeouts by Yoshifumi Kawai Aug, 2022 Medium")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2022-08-01 \ud83c\udf1f ",(0,o.kt)("a",{parentName:"li",href:"https://wapplegate.com/asynchronous-programming/?utm_source=csharpdigest&utm_medium=email&utm_campaign=426"},"Asynchronous Programming in .NET - Introduction, Misconceptions, and Problems Blog"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Asynchronous Programming in .NET - Introduction, Misconceptions, and Problems"),(0,o.kt)("li",{parentName:"ul"},"Synchronous vs. Asynchronous Programming"),(0,o.kt)("li",{parentName:"ul"},"CPU-Bound vs. I/O-Bound"),(0,o.kt)("li",{parentName:"ul"},"Identifying I/O-Bound and CPU-Bound Code"),(0,o.kt)("li",{parentName:"ul"},"An I/O-Bound Async / Await Example in .NET"),(0,o.kt)("li",{parentName:"ul"},"A CPU-Bound Async / Await Example in .NET"),(0,o.kt)("li",{parentName:"ul"},"Why Should You Use Asynchronous Programming?"),(0,o.kt)("li",{parentName:"ul"},"Asynchrony is Viral"),(0,o.kt)("li",{parentName:"ul"},"Threads and the Thread-Pool"),(0,o.kt)("li",{parentName:"ul"},"The Task Type"),(0,o.kt)("li",{parentName:"ul"},"How Do the Async / Await Keywords Work?"),(0,o.kt)("li",{parentName:"ul"},"Why is it Important for Web Applications to Use Async / Await for I/O-Bound Work?"),(0,o.kt)("li",{parentName:"ul"},"Why is it Important for UI Applications to Use Async / Await for I/O-Bound and CPU-Bound Work?"),(0,o.kt)("li",{parentName:"ul"},"Doing Multiple Things at Once"),(0,o.kt)("li",{parentName:"ul"},"What Exactly Does Task.Run Do?"),(0,o.kt)("li",{parentName:"ul"},"Common Misconceptions When Using Async / Await in .NET"),(0,o.kt)("li",{parentName:"ul"},"The Biggest Problem (Sync-Over-Async)"),(0,o.kt)("li",{parentName:"ul"},"What is Thread-Pool Starvation?"),(0,o.kt)("li",{parentName:"ul"},"Full Async Reading List")))),(0,o.kt)("p",null,"2023-04-16 ",(0,o.kt)("a",{parentName:"p",href:"https://steven-giesel.com/blogPost/d38e70b4-6f36-41ff-8011-b0b0d1f54f6e/"},"5 useful extensions for Task T in .NET")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," Fire and forget")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"public static void FireAndForget(\n  this Task task,\n  Action<Exception> errorHandler = null)\n{\n    task.ContinueWith(t =>\n    {\n        if (t.IsFaulted && errorHandler != null)\n            errorHandler(t.Exception);\n    }, TaskContinuationOptions.OnlyOnFaulted);\n}\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Retry")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"var result = await (() => GetResultAsync()).Retry(3, TimeSpan.FromSeconds(1));\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"}," OnFailure")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"await GetResultAsync().OnFailure(ex => Console.WriteLine(ex.Message));\n")),(0,o.kt)("blockquote",null,(0,o.kt)("ol",{parentName:"blockquote",start:4},(0,o.kt)("li",{parentName:"ol"},"Timeout"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},"await GetResultAsync().WithTimeout(TimeSpan.FromSeconds(1));\n")),(0,o.kt)("blockquote",null,(0,o.kt)("ol",{parentName:"blockquote",start:5},(0,o.kt)("li",{parentName:"ol"},"Fallback"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'var result = await GetResultAsync().Fallback("fallback");\n')),(0,o.kt)("p",null,"2023-08-05 ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=n6kiJKr4_oA"},"Back to Basics: Efficient Async and Await - Filip Ekberg - NDC Oslo 2023 - YouTube")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Tasks / async / await"),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("img",{alt:"image-20230805030554437",src:a(75510).Z,width:"1258",height:"713"}))),(0,o.kt)("h2",{id:"performance-measurement-in-c"},"Performance measurement in C#"),(0,o.kt)("p",null,"2023-02-05 Video ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=onpBW9b8bMs"},"A mortal's guide to making a pig run faster - Richard Banks - NDC Sydney 2022 - YouTube")," "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The talk about performance optimization in .NET\nTools:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"PerfView\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/perfview"},"https://github.com/microsoft/perfview")),(0,o.kt)("li",{parentName:"ul"},"BenchmarkDotNet\n",(0,o.kt)("a",{parentName:"li",href:"https://benchmarkdotnet.org/"},"https://benchmarkdotnet.org/")),(0,o.kt)("li",{parentName:"ul"},"Speedscope\n",(0,o.kt)("a",{parentName:"li",href:"https://www.speedscope.app/"},"https://www.speedscope.app/")),(0,o.kt)("li",{parentName:"ul"},"DotNet Source Code"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://source.dot.net/"},"https://source.dot.net/")))),(0,o.kt)("h2",{id:"tools"},"Tools"),(0,o.kt)("p",null,"2023-01-10 ",(0,o.kt)("a",{parentName:"p",href:"https://sharplab.io/"},"SharpLab")," "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Online tool to explore compiled .NET code"),(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("img",{alt:"image-20230212191123327",src:a(3731).Z,width:"1855",height:"588"}))),(0,o.kt)("p",null,"2023-02-05 ",(0,o.kt)("a",{parentName:"p",href:"https://wildermuth.com/2023/01/29/generating-sample-data-with-bogus/"},"Generating Sample Data with Bogus")," "),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"dotnet add package Bogus"),(0,o.kt)("p",{parentName:"blockquote"},"Bogus is a library that works with C#, F# and VB.NET that can be used to create repeatable, fake data for applications. It is somewhat a port of a similar library Bogus.js. It accomplished this by creating generators (called Fakers) that have a set of rules for generating one or more fake objects. Built-into Bogus is a set of generalized rules for common data categories (i.e. Addresses, Companies, People, Phone Numbers, etc.). Enough talk, let\u2019s see how it works. The full repo is at:")),(0,o.kt)("p",null,"2023-06-29 ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=pGgsFW7kDKI"},"Performance tricks I learned from contributing to open source .NET packages - Daniel Marbach - YouTube")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/danielmarbach/PerformanceTricksAzureSDK"},"danielmarbach/PerformanceTricksAzureSDK: Performance tricks I learned from contributing to the Azure .NET SDK")," github repository for this talk."),(0,o.kt)("p",{parentName:"blockquote"},"LINQ TO COLLECTION-BASED OPERATIONS"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"Array.Empty<T>()")," to represent empty arrays"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"Enumerable.Empty<T>")," to represent empty enumerables"),(0,o.kt)("li",{parentName:"ul"},"Prevent collections from growing")),(0,o.kt)("p",{parentName:"blockquote"},"HOW TO DETECT ALLOCATIONS?"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use memory profilers and watch out for excessive allocations of ",(0,o.kt)("inlineCode",{parentName:"p"},"*__DisplayClass*")," or various variants of ",(0,o.kt)("inlineCode",{parentName:"p"},"Action*")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Func*"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use tools like Heap Allocation Viewer (Rider) or Heap Allocation Analyzer (Visual Studio)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Avoid excessive allocations to reduce the GC overhead")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Think at least twice before using LINQ or unnecessary enumeration on the hot path")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Be aware of closure allocations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pool and re-use buffers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For smaller local buffers, consider using the stack")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Be aware of parameter overloads")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Where possible and feasible use value types but pay attention to unnecessary boxing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Move allocations away from the hot-path where possible")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://www.meziantou.net/csharp-9-improve-performance-using-skiplocalsinit.htm"},"C# 9 - Improving performance using the SkipLocalsInit attribute - Meziantou's blog"))))))}m.isMDXComponent=!0},3731:function(e,t,a){t.Z=a.p+"assets/images/image-20230212191123327-8923030ba343bd8c8d96f0f5df6714f9.png"},75510:function(e,t,a){t.Z=a.p+"assets/images/image-20230805030554437-bb1a6dfbaad3be3c0a7b0af2ae374a88.png"}}]);